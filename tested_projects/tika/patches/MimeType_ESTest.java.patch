diff --git a/tika-core/src/test/java/org/apache/tika/mime/MimeType_ESTest.java b/tika-core/src/test/java/org/apache/tika/mime/MimeType_ESTest.java
new file mode 100644
index 000000000..7e562545d
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/mime/MimeType_ESTest.java
@@ -0,0 +1,1862 @@
+/*
+ * This file was automatically generated by EvoSuite
+ * Wed Aug 14 17:07:44 GMT 2019
+ */
+
+package org.apache.tika.mime;
+
+import org.junit.Test;
+import static org.junit.Assert.*;
+import static org.evosuite.runtime.EvoAssertions.*;
+import java.io.ByteArrayInputStream;
+import java.io.File;
+import java.io.InputStream;
+import java.io.PushbackInputStream;
+import java.net.URL;
+import java.util.SortedSet;
+import java.util.regex.PatternSyntaxException;
+import org.apache.tika.mime.Magic;
+import org.apache.tika.mime.MimeType;
+import org.apache.tika.mime.MimeTypes;
+import org.evosuite.runtime.EvoRunner;
+import org.evosuite.runtime.EvoRunnerParameters;
+import org.evosuite.runtime.mock.java.io.MockFile;
+import org.evosuite.runtime.mock.java.net.MockURL;
+import org.junit.runner.RunWith;
+
+@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
+public class MimeType_ESTest extends MimeType_ESTest_scaffolding {
+
+  @Test(timeout = 4000)
+  public void test00()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("L/G");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      
+      MimeType.RootXML mimeType_RootXML0 = mimeType0.new RootXML(mimeType0, "-8P57T!YOcm_L<J", "L/G");
+      assertNotNull(mimeType_RootXML0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      
+      boolean boolean0 = mimeType_RootXML0.matches("");
+      assertFalse(boolean0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+  }
+
+  @Test(timeout = 4000)
+  public void test01()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.forName("text/plain");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("text/plain", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("text/plain", mimeType0.getName());
+      
+      String string0 = mimeType0.toString();
+      assertEquals("text/plain", string0);
+      assertNotNull(string0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("text/plain", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("text/plain", mimeType0.getName());
+  }
+
+  @Test(timeout = 4000)
+  public void test02()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      byte[] byteArray0 = new byte[5];
+      MimeType mimeType0 = mimeTypes0.getMimeType(byteArray0);
+      assertNotNull(mimeType0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals(5, byteArray0.length);
+      
+      boolean boolean0 = mimeType0.hasMagic();
+      assertFalse(boolean0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals(5, byteArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test03()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("text/plain");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      String string0 = mimeType0.getName();
+      assertEquals("application/octet-stream", string0);
+      assertNotNull(string0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+  }
+
+  @Test(timeout = 4000)
+  public void test04()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      
+      // Undeclared exception!
+      try { 
+        mimeType0.matchesXML((byte[]) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test05()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      URL uRL0 = MockURL.getHttpExample();
+      assertNotNull(uRL0);
+      assertNull(uRL0.getQuery());
+      assertEquals((-1), uRL0.getPort());
+      assertNull(uRL0.getRef());
+      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
+      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
+      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
+      assertEquals((-1), uRL0.getDefaultPort());
+      assertEquals("http", uRL0.getProtocol());
+      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
+      assertNull(uRL0.getUserInfo());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType(uRL0);
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNull(uRL0.getQuery());
+      assertEquals((-1), uRL0.getPort());
+      assertNull(uRL0.getRef());
+      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
+      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
+      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
+      assertEquals((-1), uRL0.getDefaultPort());
+      assertEquals("http", uRL0.getProtocol());
+      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
+      assertNull(uRL0.getUserInfo());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      // Undeclared exception!
+      try { 
+        mimeType0.matches((byte[]) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test06()  throws Throwable  {
+      // Undeclared exception!
+      try { 
+        MimeType.isValid((String) null);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Name is missing
+         //
+         verifyException("org.apache.tika.mime.MimeType", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test07()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      byte[] byteArray0 = new byte[9];
+      MimeType mimeType0 = mimeTypes0.getMimeType("Name is missing", byteArray0);
+      assertNotNull(mimeType0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals(9, byteArray0.length);
+      
+      // Undeclared exception!
+      try { 
+        mimeType0.addRootXML("application/octet-stream", "{q>&S5l[+");
+        fail("Expecting exception: PatternSyntaxException");
+      
+      } catch(PatternSyntaxException e) {
+         //
+         // Illegal repetition near index 2\r
+         // .*<{q>&S5l[+[^<>]*\\p{Space}xmlns=[\"']?application/octet-stream[\"']?[^<>]*>.*\r
+         //   ^
+         //
+         verifyException("java.util.regex.Pattern", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test08()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.forName("L/G");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("l/g", mimeType0.getName());
+      assertEquals("l/g", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+  }
+
+  @Test(timeout = 4000)
+  public void test09()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.forName("text/plain");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("text/plain", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("text/plain", mimeType0.toString());
+      
+      byte[] byteArray0 = new byte[8];
+      MimeType mimeType1 = mimeTypes0.getMimeType(byteArray0);
+      assertNotNull(mimeType1);
+      assertNotSame(mimeType1, mimeType0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertFalse(mimeType1.equals((Object)mimeType0));
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType1.getDescription());
+      assertEquals("application/octet-stream", mimeType1.getName());
+      assertEquals("application/octet-stream", mimeType1.toString());
+      assertFalse(mimeType1.hasMagic());
+      assertEquals(8, byteArray0.length);
+      
+      int int0 = mimeType0.compareTo(mimeType1);
+      assertEquals(1, int0);
+      assertNotSame(mimeType0, mimeType1);
+      assertNotSame(mimeType1, mimeType0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertFalse(mimeType0.equals((Object)mimeType1));
+      assertFalse(mimeType1.equals((Object)mimeType0));
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("text/plain", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("text/plain", mimeType0.toString());
+      assertEquals("", mimeType1.getDescription());
+      assertEquals("application/octet-stream", mimeType1.getName());
+      assertEquals("application/octet-stream", mimeType1.toString());
+      assertFalse(mimeType1.hasMagic());
+      assertEquals(8, byteArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test10()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      byte[] byteArray0 = new byte[1];
+      MimeType mimeType0 = mimeTypes0.getMimeType(byteArray0);
+      assertNotNull(mimeType0);
+      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals(1, byteArray0.length);
+      
+      // Undeclared exception!
+      try { 
+        mimeType0.compareTo((MimeType) null);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // MimeType is missing
+         //
+         verifyException("org.apache.tika.mime.MimeType", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test11()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = new MimeType(mimeTypes0, "application/octet-stream");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      MimeType.RootXML mimeType_RootXML0 = mimeType0.new RootXML(mimeType0, "date", "VXCP");
+      assertNotNull(mimeType_RootXML0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      boolean boolean0 = mimeType_RootXML0.matches("date", "VXCP");
+      assertTrue(boolean0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+  }
+
+  @Test(timeout = 4000)
+  public void test12()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      byte[] byteArray0 = new byte[6];
+      MimeType mimeType0 = mimeTypes0.getMimeType("", byteArray0);
+      assertNotNull(mimeType0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals(6, byteArray0.length);
+      
+      MimeType.RootXML mimeType_RootXML0 = mimeType0.new RootXML(mimeType0, (String) null, "n6T^g-u3,");
+      assertNotNull(mimeType_RootXML0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals(6, byteArray0.length);
+      
+      boolean boolean0 = mimeType_RootXML0.matches((String) null, "text/plain");
+      assertFalse(boolean0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals(6, byteArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test13()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      byte[] byteArray0 = new byte[0];
+      MimeType mimeType0 = mimeTypes0.getMimeType(byteArray0);
+      assertNotNull(mimeType0);
+      assertArrayEquals(new byte[] {}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("text/plain", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("text/plain", mimeType0.toString());
+      assertEquals(0, byteArray0.length);
+      
+      // Undeclared exception!
+      try { 
+        mimeType0.addRootXML((String) null, "");
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Both namespaceURI and localName cannot be null
+         //
+         verifyException("org.apache.tika.mime.MimeType$RootXML", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test14()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      byte[] byteArray0 = new byte[6];
+      MimeType mimeType0 = mimeTypes0.getMimeType("LO-CH]`_!!Iy)El\"h", byteArray0);
+      assertNotNull(mimeType0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals(6, byteArray0.length);
+      
+      Magic magic0 = new Magic();
+      assertNotNull(magic0);
+      
+      mimeType0.addMagic(magic0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertTrue(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals(6, byteArray0.length);
+      
+      // Undeclared exception!
+      try { 
+        mimeType0.matchesMagic(byteArray0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.Magic", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test15()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      Magic magic0 = new Magic(93);
+      assertNotNull(magic0);
+      
+      mimeType0.addMagic(magic0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertTrue(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.add(mimeType0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.Magic", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test16()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MockFile mockFile0 = new MockFile((String) null, "Media type can not inherit its descendant: ");
+      assertNotNull(mockFile0);
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType((File) mockFile0);
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mockFile0.isDirectory());
+      assertFalse(mockFile0.exists());
+      assertEquals(0L, mockFile0.getFreeSpace());
+      assertFalse(mockFile0.canRead());
+      assertNull(mockFile0.getParent());
+      assertEquals("Media type can not inherit its descendant: ", mockFile0.toString());
+      assertFalse(mockFile0.isHidden());
+      assertEquals(0L, mockFile0.getUsableSpace());
+      assertEquals(0L, mockFile0.lastModified());
+      assertTrue(mockFile0.isFile());
+      assertFalse(mockFile0.isAbsolute());
+      assertFalse(mockFile0.canExecute());
+      assertEquals(0L, mockFile0.getTotalSpace());
+      assertEquals("Media type can not inherit its descendant: ", mockFile0.getName());
+      assertEquals(0L, mockFile0.length());
+      assertFalse(mockFile0.canWrite());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      
+      mimeType0.addMagic((Magic) null);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mockFile0.isDirectory());
+      assertFalse(mockFile0.exists());
+      assertEquals(0L, mockFile0.getFreeSpace());
+      assertFalse(mockFile0.canRead());
+      assertNull(mockFile0.getParent());
+      assertEquals("Media type can not inherit its descendant: ", mockFile0.toString());
+      assertFalse(mockFile0.isHidden());
+      assertEquals(0L, mockFile0.getUsableSpace());
+      assertEquals(0L, mockFile0.lastModified());
+      assertTrue(mockFile0.isFile());
+      assertFalse(mockFile0.isAbsolute());
+      assertFalse(mockFile0.canExecute());
+      assertEquals(0L, mockFile0.getTotalSpace());
+      assertEquals("Media type can not inherit its descendant: ", mockFile0.getName());
+      assertEquals(0L, mockFile0.length());
+      assertFalse(mockFile0.canWrite());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+  }
+
+  @Test(timeout = 4000)
+  public void test17()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      mimeType0.addRootXML("Presentation-Format", "text/plain");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      boolean boolean0 = mimeType0.hasRootXML();
+      assertTrue(boolean0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+  }
+
+  @Test(timeout = 4000)
+  public void test18()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      
+      mimeTypes0.add(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+  }
+
+  @Test(timeout = 4000)
+  public void test19()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MockFile mockFile0 = new MockFile(":8(_lmY?EW_s");
+      assertNotNull(mockFile0);
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType((File) mockFile0);
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertTrue(mockFile0.isFile());
+      assertEquals(0L, mockFile0.lastModified());
+      assertFalse(mockFile0.canRead());
+      assertFalse(mockFile0.canWrite());
+      assertFalse(mockFile0.isAbsolute());
+      assertNull(mockFile0.getParent());
+      assertEquals(0L, mockFile0.getUsableSpace());
+      assertFalse(mockFile0.isHidden());
+      assertEquals(0L, mockFile0.getFreeSpace());
+      assertEquals(":8(_lmY?EW_s", mockFile0.toString());
+      assertFalse(mockFile0.isDirectory());
+      assertEquals(0L, mockFile0.length());
+      assertEquals(":8(_lmY?EW_s", mockFile0.getName());
+      assertFalse(mockFile0.exists());
+      assertEquals(0L, mockFile0.getTotalSpace());
+      assertFalse(mockFile0.canExecute());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      
+      mimeType0.addRootXML("Both namespaceURI and localName cannot be null", "");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertTrue(mockFile0.isFile());
+      assertEquals(0L, mockFile0.lastModified());
+      assertFalse(mockFile0.canRead());
+      assertFalse(mockFile0.canWrite());
+      assertFalse(mockFile0.isAbsolute());
+      assertNull(mockFile0.getParent());
+      assertEquals(0L, mockFile0.getUsableSpace());
+      assertFalse(mockFile0.isHidden());
+      assertEquals(0L, mockFile0.getFreeSpace());
+      assertEquals(":8(_lmY?EW_s", mockFile0.toString());
+      assertFalse(mockFile0.isDirectory());
+      assertEquals(0L, mockFile0.length());
+      assertEquals(":8(_lmY?EW_s", mockFile0.getName());
+      assertFalse(mockFile0.exists());
+      assertEquals(0L, mockFile0.getTotalSpace());
+      assertFalse(mockFile0.canExecute());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      
+      boolean boolean0 = mimeType0.matchesXML("Conflicting extension pattern: ", "");
+      assertFalse(boolean0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertTrue(mockFile0.isFile());
+      assertEquals(0L, mockFile0.lastModified());
+      assertFalse(mockFile0.canRead());
+      assertFalse(mockFile0.canWrite());
+      assertFalse(mockFile0.isAbsolute());
+      assertNull(mockFile0.getParent());
+      assertEquals(0L, mockFile0.getUsableSpace());
+      assertFalse(mockFile0.isHidden());
+      assertEquals(0L, mockFile0.getFreeSpace());
+      assertEquals(":8(_lmY?EW_s", mockFile0.toString());
+      assertFalse(mockFile0.isDirectory());
+      assertEquals(0L, mockFile0.length());
+      assertEquals(":8(_lmY?EW_s", mockFile0.getName());
+      assertFalse(mockFile0.exists());
+      assertEquals(0L, mockFile0.getTotalSpace());
+      assertFalse(mockFile0.canExecute());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+  }
+
+  @Test(timeout = 4000)
+  public void test20()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      byte[] byteArray0 = new byte[5];
+      MimeType mimeType0 = mimeTypes0.getMimeType(byteArray0);
+      assertNotNull(mimeType0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals(5, byteArray0.length);
+      
+      mimeType0.addRootXML("application/octet-stream", "n6T^g-u3,");
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals(5, byteArray0.length);
+      
+      boolean boolean0 = mimeType0.matches(byteArray0);
+      assertFalse(boolean0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals(5, byteArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test21()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("text/plain");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      try { 
+        mimeType0.addAlias("text/plain");
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Media type alias already exists: text/plain
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test22()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.forName("text/plain");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("text/plain", mimeType0.getName());
+      assertEquals("text/plain", mimeType0.toString());
+      assertFalse(mimeType0.hasMagic());
+      
+      mimeType0.addAlias("text/plain");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("text/plain", mimeType0.getName());
+      assertEquals("text/plain", mimeType0.toString());
+      assertFalse(mimeType0.hasMagic());
+  }
+
+  @Test(timeout = 4000)
+  public void test23()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      byte[] byteArray0 = new byte[1];
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)61, (byte)61);
+      assertNotNull(byteArrayInputStream0);
+      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
+      assertEquals((-60), byteArrayInputStream0.available());
+      assertEquals(1, byteArray0.length);
+      
+      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
+      assertNotNull(pushbackInputStream0);
+      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
+      assertEquals((-60), byteArrayInputStream0.available());
+      assertEquals(1, byteArray0.length);
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("}RhF^ksl", (InputStream) pushbackInputStream0);
+      assertNotNull(mimeType0);
+      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals((-60), byteArrayInputStream0.available());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("text/plain", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("text/plain", mimeType0.toString());
+      assertEquals(1, byteArray0.length);
+      
+      // Undeclared exception!
+      try { 
+        mimeType0.setDescription((String) null);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Description is missing
+         //
+         verifyException("org.apache.tika.mime.MimeType", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test24()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      mimeType0.setDescription("");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+  }
+
+  @Test(timeout = 4000)
+  public void test25()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      byte[] byteArray0 = new byte[5];
+      byteArray0[0] = (byte)109;
+      byteArray0[1] = (byte) (-20);
+      byteArray0[2] = (byte)59;
+      byteArray0[3] = (byte)109;
+      byteArray0[4] = (byte) (-1);
+      MimeType mimeType0 = mimeTypes0.getMimeType(byteArray0);
+      assertNotNull(mimeType0);
+      assertArrayEquals(new byte[] {(byte)109, (byte) (-20), (byte)59, (byte)109, (byte) (-1)}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("text/plain", mimeType0.getName());
+      assertEquals("text/plain", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals(5, byteArray0.length);
+      
+      MimeTypes mimeTypes1 = new MimeTypes();
+      assertNotNull(mimeTypes1);
+      assertFalse(mimeTypes1.equals((Object)mimeTypes0));
+      assertEquals(1024, mimeTypes1.getMinLength());
+      
+      MimeType mimeType1 = mimeTypes1.getMimeType("application/octet-stream", byteArray0);
+      assertNotNull(mimeType1);
+      assertNotSame(mimeTypes1, mimeTypes0);
+      assertNotSame(mimeType1, mimeType0);
+      assertArrayEquals(new byte[] {(byte)109, (byte) (-20), (byte)59, (byte)109, (byte) (-1)}, byteArray0);
+      assertFalse(mimeTypes1.equals((Object)mimeTypes0));
+      assertFalse(mimeType1.equals((Object)mimeType0));
+      assertEquals(1024, mimeTypes1.getMinLength());
+      assertEquals("text/plain", mimeType1.getName());
+      assertEquals("text/plain", mimeType1.toString());
+      assertEquals("", mimeType1.getDescription());
+      assertFalse(mimeType1.hasMagic());
+      assertEquals(5, byteArray0.length);
+      
+      int int0 = mimeType1.compareTo(mimeType0);
+      assertEquals(0, int0);
+      assertNotSame(mimeTypes0, mimeTypes1);
+      assertNotSame(mimeType0, mimeType1);
+      assertNotSame(mimeTypes1, mimeTypes0);
+      assertNotSame(mimeType1, mimeType0);
+      assertArrayEquals(new byte[] {(byte)109, (byte) (-20), (byte)59, (byte)109, (byte) (-1)}, byteArray0);
+      assertFalse(mimeTypes0.equals((Object)mimeTypes1));
+      assertFalse(mimeType0.equals((Object)mimeType1));
+      assertFalse(mimeTypes1.equals((Object)mimeTypes0));
+      assertFalse(mimeType1.equals((Object)mimeType0));
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("text/plain", mimeType0.getName());
+      assertEquals("text/plain", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals(1024, mimeTypes1.getMinLength());
+      assertEquals("text/plain", mimeType1.getName());
+      assertEquals("text/plain", mimeType1.toString());
+      assertEquals("", mimeType1.getDescription());
+      assertFalse(mimeType1.hasMagic());
+      assertEquals(5, byteArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test26()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      
+      // Undeclared exception!
+      try { 
+        mimeType0.isDescendantOf((MimeType) null);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // MimeType is missing
+         //
+         verifyException("org.apache.tika.mime.MimeType", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test27()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.forName("text/plain");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("text/plain", mimeType0.getName());
+      assertEquals("text/plain", mimeType0.toString());
+      assertFalse(mimeType0.hasMagic());
+      
+      byte[] byteArray0 = new byte[8];
+      MimeType mimeType1 = mimeTypes0.getMimeType(byteArray0);
+      assertNotNull(mimeType1);
+      assertNotSame(mimeType1, mimeType0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertFalse(mimeType1.equals((Object)mimeType0));
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType1.toString());
+      assertEquals("application/octet-stream", mimeType1.getName());
+      assertEquals("", mimeType1.getDescription());
+      assertFalse(mimeType1.hasMagic());
+      assertEquals(8, byteArray0.length);
+      
+      try { 
+        mimeType1.setSuperType(mimeType0);
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Media type can not inherit its descendant: text/plain
+         //
+         verifyException("org.apache.tika.mime.MimeType", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test28()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("[(B\n36?uPm0");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      byte[] byteArray0 = new byte[2];
+      byteArray0[0] = (byte)50;
+      byteArray0[1] = (byte)10;
+      MimeType mimeType1 = mimeTypes0.getMimeType("org.apache.tika.mime.Patterns", byteArray0);
+      assertNotNull(mimeType1);
+      assertNotSame(mimeType1, mimeType0);
+      assertArrayEquals(new byte[] {(byte)50, (byte)10}, byteArray0);
+      assertFalse(mimeType1.equals((Object)mimeType0));
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType1.hasMagic());
+      assertEquals("", mimeType1.getDescription());
+      assertEquals("text/plain", mimeType1.toString());
+      assertEquals("text/plain", mimeType1.getName());
+      assertEquals(2, byteArray0.length);
+      
+      mimeType1.setSuperType(mimeType0);
+      assertNotSame(mimeType0, mimeType1);
+      assertNotSame(mimeType1, mimeType0);
+      assertArrayEquals(new byte[] {(byte)50, (byte)10}, byteArray0);
+      assertFalse(mimeType0.equals((Object)mimeType1));
+      assertFalse(mimeType1.equals((Object)mimeType0));
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertFalse(mimeType1.hasMagic());
+      assertEquals("", mimeType1.getDescription());
+      assertEquals("text/plain", mimeType1.toString());
+      assertEquals("text/plain", mimeType1.getName());
+      assertEquals(2, byteArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test29()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      byte[] byteArray0 = new byte[8];
+      MimeType mimeType0 = mimeTypes0.getMimeType(byteArray0);
+      assertNotNull(mimeType0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals(8, byteArray0.length);
+      
+      MimeTypes mimeTypes1 = new MimeTypes();
+      assertNotNull(mimeTypes1);
+      assertFalse(mimeTypes1.equals((Object)mimeTypes0));
+      assertEquals(1024, mimeTypes1.getMinLength());
+      
+      MockFile mockFile0 = new MockFile("Both namespaceURI and localName cannot be null", "text/plain");
+      assertNotNull(mockFile0);
+      
+      MimeType mimeType1 = mimeTypes1.getMimeType((File) mockFile0);
+      assertNotNull(mimeType1);
+      assertNotSame(mimeTypes1, mimeTypes0);
+      assertNotSame(mimeType1, mimeType0);
+      assertFalse(mimeTypes1.equals((Object)mimeTypes0));
+      assertFalse(mimeType1.equals((Object)mimeType0));
+      assertEquals(1024, mimeTypes1.getMinLength());
+      assertFalse(mockFile0.canRead());
+      assertFalse(mockFile0.canExecute());
+      assertEquals(0L, mockFile0.getTotalSpace());
+      assertFalse(mockFile0.canWrite());
+      assertEquals(0L, mockFile0.lastModified());
+      assertFalse(mockFile0.isDirectory());
+      assertFalse(mockFile0.isHidden());
+      assertEquals(0L, mockFile0.length());
+      assertTrue(mockFile0.isAbsolute());
+      assertEquals(0L, mockFile0.getFreeSpace());
+      assertFalse(mockFile0.exists());
+      assertEquals(0L, mockFile0.getUsableSpace());
+      assertEquals("plain", mockFile0.getName());
+      assertEquals("C:\\Code\\Lab\\BugMiner\\tested_project\\tika\\Both namespaceURI and localName cannot be null\\text", mockFile0.getParent());
+      assertEquals("C:\\Code\\Lab\\BugMiner\\tested_project\\tika\\Both namespaceURI and localName cannot be null\\text\\plain", mockFile0.toString());
+      assertTrue(mockFile0.isFile());
+      assertFalse(mimeType1.hasMagic());
+      assertEquals("application/octet-stream", mimeType1.toString());
+      assertEquals("application/octet-stream", mimeType1.getName());
+      assertEquals("", mimeType1.getDescription());
+      
+      // Undeclared exception!
+      try { 
+        mimeType0.setSuperType(mimeType1);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // MimeType is from a different registry
+         //
+         verifyException("org.apache.tika.mime.MimeType", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test30()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      File file0 = MockFile.createTempFile("text/plain", "PZtW(xM3");
+      assertNotNull(file0);
+      assertEquals("C:\\Users\\rotem\\AppData\\Local\\Temp\\text\\plain0PZtW(xM3", file0.toString());
+      assertFalse(file0.isDirectory());
+      assertTrue(file0.canWrite());
+      assertEquals(0L, file0.getUsableSpace());
+      assertFalse(file0.isHidden());
+      assertTrue(file0.isAbsolute());
+      assertEquals(0L, file0.getFreeSpace());
+      assertEquals(0L, file0.length());
+      assertTrue(file0.canRead());
+      assertEquals("plain0PZtW(xM3", file0.getName());
+      assertTrue(file0.canExecute());
+      assertTrue(file0.isFile());
+      assertEquals("C:\\Users\\rotem\\AppData\\Local\\Temp\\text", file0.getParent());
+      assertTrue(file0.exists());
+      assertEquals(1392409281320L, file0.lastModified());
+      assertEquals(0L, file0.getTotalSpace());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType(file0);
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("C:\\Users\\rotem\\AppData\\Local\\Temp\\text\\plain0PZtW(xM3", file0.toString());
+      assertFalse(file0.isDirectory());
+      assertTrue(file0.canWrite());
+      assertEquals(0L, file0.getUsableSpace());
+      assertFalse(file0.isHidden());
+      assertTrue(file0.isAbsolute());
+      assertEquals(0L, file0.getFreeSpace());
+      assertEquals(0L, file0.length());
+      assertTrue(file0.canRead());
+      assertEquals("plain0PZtW(xM3", file0.getName());
+      assertTrue(file0.canExecute());
+      assertTrue(file0.isFile());
+      assertEquals("C:\\Users\\rotem\\AppData\\Local\\Temp\\text", file0.getParent());
+      assertTrue(file0.exists());
+      assertEquals(1392409281320L, file0.lastModified());
+      assertEquals(0L, file0.getTotalSpace());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      
+      // Undeclared exception!
+      try { 
+        mimeType0.setSuperType((MimeType) null);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // MimeType is missing
+         //
+         verifyException("org.apache.tika.mime.MimeType", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test31()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = null;
+      try {
+        mimeType0 = new MimeType(mimeTypes0, "ZTMYstI<mH");
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Media type name is invalid
+         //
+         verifyException("org.apache.tika.mime.MimeType", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test32()  throws Throwable  {
+      MimeType mimeType0 = null;
+      try {
+        mimeType0 = new MimeType((MimeTypes) null, "Y{ehy,#*C7");
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Registry is missing
+         //
+         verifyException("org.apache.tika.mime.MimeType", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test33()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("text/plain");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      
+      try { 
+        mimeType0.addAlias("/:3");
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Invalid media type alias: /:3
+         //
+         verifyException("org.apache.tika.mime.MimeType", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test34()  throws Throwable  {
+      boolean boolean0 = MimeType.isValid("TjcRbBv/u*n3.Tv/k");
+      assertFalse(boolean0);
+  }
+
+  @Test(timeout = 4000)
+  public void test35()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      try { 
+        mimeTypes0.forName("G=~R$]c\"OJJkwT.");
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Invalid media type name: G=~R$]c\"OJJkwT.
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test36()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      try { 
+        mimeTypes0.forName("H-y3d?gYq%7tWW$e =");
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Invalid media type name: H-y3d?gYq%7tWW$e =
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test37()  throws Throwable  {
+      boolean boolean0 = MimeType.isValid("LO-CH]`_!!Iy)El\"h");
+      assertFalse(boolean0);
+  }
+
+  @Test(timeout = 4000)
+  public void test38()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      try { 
+        mimeTypes0.forName("[^<>]*p{Space}xmlns=[\"']?");
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Invalid media type name: [^<>]*p{Space}xmlns=[\"']?
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test39()  throws Throwable  {
+      boolean boolean0 = MimeType.isValid("\"");
+      assertFalse(boolean0);
+  }
+
+  @Test(timeout = 4000)
+  public void test40()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      try { 
+        mimeTypes0.forName(":");
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Invalid media type name: :
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test41()  throws Throwable  {
+      boolean boolean0 = MimeType.isValid("}Nm};wud9+@v");
+      assertFalse(boolean0);
+  }
+
+  @Test(timeout = 4000)
+  public void test42()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      try { 
+        mimeTypes0.forName(",");
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Invalid media type name: ,
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test43()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      try { 
+        mimeTypes0.forName("Az%A@e:Y%=ow|*");
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Invalid media type name: Az%A@e:Y%=ow|*
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test44()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      try { 
+        mimeTypes0.forName(">");
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Invalid media type name: >
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test45()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      try { 
+        mimeTypes0.forName("T/)7");
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Invalid media type name: T/)7
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test46()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      byte[] byteArray0 = new byte[5];
+      MimeType mimeType0 = mimeTypes0.getMimeType(byteArray0);
+      assertNotNull(mimeType0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals(5, byteArray0.length);
+      
+      try { 
+        mimeType0.addAlias("ItB7(LF,3bp+J`vhA0");
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Invalid media type alias: ItB7(LF,3bp+J`vhA0
+         //
+         verifyException("org.apache.tika.mime.MimeType", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test47()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      try { 
+        mimeTypes0.forName(":>fV4(ucDc6C[JX");
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Invalid media type name: :>fV4(ucDc6C[JX
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test48()  throws Throwable  {
+      boolean boolean0 = MimeType.isValid("Media type can not inherit its descendant: ");
+      assertFalse(boolean0);
+  }
+
+  @Test(timeout = 4000)
+  public void test49()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MockFile mockFile0 = new MockFile("text/plain", "");
+      assertNotNull(mockFile0);
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType((File) mockFile0);
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mockFile0.isHidden());
+      assertEquals(0L, mockFile0.getUsableSpace());
+      assertFalse(mockFile0.exists());
+      assertFalse(mockFile0.canRead());
+      assertFalse(mockFile0.canExecute());
+      assertTrue(mockFile0.isFile());
+      assertEquals(0L, mockFile0.length());
+      assertEquals(0L, mockFile0.getFreeSpace());
+      assertEquals("plain", mockFile0.getName());
+      assertEquals(0L, mockFile0.getTotalSpace());
+      assertTrue(mockFile0.isAbsolute());
+      assertEquals("C:\\Code\\Lab\\BugMiner\\tested_project\\tika\\text", mockFile0.getParent());
+      assertFalse(mockFile0.canWrite());
+      assertEquals("C:\\Code\\Lab\\BugMiner\\tested_project\\tika\\text\\plain", mockFile0.toString());
+      assertEquals(0L, mockFile0.lastModified());
+      assertFalse(mockFile0.isDirectory());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      // Undeclared exception!
+      try { 
+        mimeType0.addAlias((String) null);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Name is missing
+         //
+         verifyException("org.apache.tika.mime.MimeType", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test50()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      MimeType mimeType1 = mimeType0.getSuperType();
+      assertNull(mimeType1);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+  }
+
+  @Test(timeout = 4000)
+  public void test51()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      MimeType.RootXML[] mimeType_RootXMLArray0 = mimeType0.getRootXMLs();
+      assertNotNull(mimeType_RootXMLArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals(0, mimeType_RootXMLArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test52()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      String string0 = mimeType0.getDescription();
+      assertEquals("", string0);
+      assertNotNull(string0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+  }
+
+  @Test(timeout = 4000)
+  public void test53()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = new MimeType(mimeTypes0, "application/octet-stream");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      SortedSet<String> sortedSet0 = mimeType0.getAliases();
+      assertNotNull(sortedSet0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertTrue(sortedSet0.isEmpty());
+      assertEquals(0, sortedSet0.size());
+      assertFalse(sortedSet0.contains("application/octet-stream"));
+  }
+
+  @Test(timeout = 4000)
+  public void test54()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      
+      try { 
+        mimeType0.setSuperType(mimeType0);
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Media type can not inherit itself: application/octet-stream
+         //
+         verifyException("org.apache.tika.mime.MimeType", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test55()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      
+      SortedSet<MimeType> sortedSet0 = mimeType0.getSubTypes();
+      assertNotNull(sortedSet0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals(1, sortedSet0.size());
+      assertFalse(sortedSet0.isEmpty());
+      assertFalse(sortedSet0.contains(mimeType0));
+  }
+
+  @Test(timeout = 4000)
+  public void test56()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      byte[] byteArray0 = new byte[0];
+      MimeType mimeType0 = mimeTypes0.getMimeType("[^<>]*p{Space}xmlns=[\"']?", byteArray0);
+      assertNotNull(mimeType0);
+      assertArrayEquals(new byte[] {}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("text/plain", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("text/plain", mimeType0.toString());
+      assertEquals(0, byteArray0.length);
+      
+      int int0 = mimeType0.getMinLength();
+      assertEquals(0, int0);
+      assertArrayEquals(new byte[] {}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("text/plain", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("text/plain", mimeType0.toString());
+      assertEquals(0, byteArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test57()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      
+      Magic[] magicArray0 = mimeType0.getMagics();
+      assertNotNull(magicArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals(0, magicArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test58()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      MimeType.RootXML mimeType_RootXML0 = mimeType0.new RootXML(mimeType0, "", "application/octet-stream");
+      assertNotNull(mimeType_RootXML0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      String string0 = mimeType_RootXML0.getNameSpaceURI();
+      assertEquals("", string0);
+      assertNotNull(string0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+  }
+
+  @Test(timeout = 4000)
+  public void test59()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = new MimeType(mimeTypes0, "application/octet-stream");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      MimeType.RootXML mimeType_RootXML0 = mimeType0.new RootXML(mimeType0, "date", "VXCP");
+      assertNotNull(mimeType_RootXML0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      String string0 = mimeType_RootXML0.getLocalName();
+      assertEquals("VXCP", string0);
+      assertNotNull(string0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+  }
+
+  @Test(timeout = 4000)
+  public void test60()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertFalse(mimeType0.hasMagic());
+      
+      MimeType.RootXML mimeType_RootXML0 = mimeType0.new RootXML(mimeType0, "text/plain", "");
+      assertNotNull(mimeType_RootXML0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertFalse(mimeType0.hasMagic());
+      
+      MimeType mimeType1 = mimeType_RootXML0.getType();
+      assertNotNull(mimeType1);
+      assertSame(mimeType0, mimeType1);
+      assertSame(mimeType1, mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType1.toString());
+      assertEquals("application/octet-stream", mimeType1.getName());
+      assertEquals("", mimeType1.getDescription());
+      assertFalse(mimeType1.hasMagic());
+  }
+
+  @Test(timeout = 4000)
+  public void test61()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      MimeType.RootXML mimeType_RootXML0 = mimeType0.new RootXML(mimeType0, "text/plain", "");
+      assertNotNull(mimeType_RootXML0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      String string0 = mimeType_RootXML0.toString();
+      assertEquals("application/octet-stream, text/plain, ", string0);
+      assertNotNull(string0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+  }
+
+  @Test(timeout = 4000)
+  public void test62()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      assertNotNull(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      
+      MimeType.RootXML mimeType_RootXML0 = mimeType0.new RootXML(mimeType0, "text/plain", "");
+      assertNotNull(mimeType_RootXML0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      
+      byte[] byteArray0 = new byte[5];
+      boolean boolean0 = mimeType_RootXML0.matches(byteArray0);
+      assertFalse(boolean0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals(5, byteArray0.length);
+  }
+}
