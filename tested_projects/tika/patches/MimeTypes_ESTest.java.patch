diff --git a/tika-core/src/test/java/org/apache/tika/mime/MimeTypes_ESTest.java b/tika-core/src/test/java/org/apache/tika/mime/MimeTypes_ESTest.java
new file mode 100644
index 000000000..45403933b
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/mime/MimeTypes_ESTest.java
@@ -0,0 +1,808 @@
+/*
+ * This file was automatically generated by EvoSuite
+ * Wed Aug 14 17:08:52 GMT 2019
+ */
+
+package org.apache.tika.mime;
+
+import org.junit.Test;
+import static org.junit.Assert.*;
+import static org.evosuite.shaded.org.mockito.Mockito.*;
+import static org.evosuite.runtime.EvoAssertions.*;
+import java.io.ByteArrayInputStream;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.PipedInputStream;
+import java.io.PushbackInputStream;
+import java.io.SequenceInputStream;
+import java.net.URL;
+import java.util.Enumeration;
+import org.apache.tika.metadata.Metadata;
+import org.apache.tika.mime.Magic;
+import org.apache.tika.mime.MediaType;
+import org.apache.tika.mime.MimeType;
+import org.apache.tika.mime.MimeTypes;
+import org.evosuite.runtime.EvoRunner;
+import org.evosuite.runtime.EvoRunnerParameters;
+import org.evosuite.runtime.ViolatedAssumptionAnswer;
+import org.evosuite.runtime.mock.java.io.MockFile;
+import org.evosuite.runtime.mock.java.net.MockURL;
+import org.junit.runner.RunWith;
+
+@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
+public class MimeTypes_ESTest extends MimeTypes_ESTest_scaffolding {
+
+  @Test(timeout = 4000)
+  public void test00()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      int int0 = mimeTypes0.getMinLength();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals(1024, int0);
+  }
+
+  @Test(timeout = 4000)
+  public void test01()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      MockFile mockFile0 = new MockFile("text/plain");
+      assertNotNull(mockFile0);
+      
+      URL uRL0 = mockFile0.toURL();
+      assertEquals(0L, mockFile0.getFreeSpace());
+      assertEquals(0L, mockFile0.length());
+      assertEquals("plain", mockFile0.getName());
+      assertEquals("text", mockFile0.getParent());
+      assertFalse(mockFile0.exists());
+      assertFalse(mockFile0.isAbsolute());
+      assertFalse(mockFile0.isDirectory());
+      assertFalse(mockFile0.canExecute());
+      assertFalse(mockFile0.canWrite());
+      assertEquals(0L, mockFile0.getTotalSpace());
+      assertEquals("text\\plain", mockFile0.toString());
+      assertEquals(0L, mockFile0.lastModified());
+      assertTrue(mockFile0.isFile());
+      assertFalse(mockFile0.canRead());
+      assertEquals(0L, mockFile0.getUsableSpace());
+      assertFalse(mockFile0.isHidden());
+      assertEquals("file", uRL0.getProtocol());
+      assertNull(uRL0.getAuthority());
+      assertNull(uRL0.getUserInfo());
+      assertNull(uRL0.getQuery());
+      assertEquals("", uRL0.getHost());
+      assertEquals((-1), uRL0.getPort());
+      assertEquals((-1), uRL0.getDefaultPort());
+      assertNull(uRL0.getRef());
+      assertNotNull(uRL0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getType(uRL0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("java.net.URL", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test02()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getType("&&UeQG!>>t", "yZ>c**NSzjB1s9:a", (byte[]) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("java.io.ByteArrayInputStream", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test03()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((byte[]) null);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Data is missing
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test04()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((URL) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test05()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      byte[] byteArray0 = new byte[4];
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-706), (byte)86);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(86, byteArrayInputStream0.available());
+      assertEquals(4, byteArray0.length);
+      assertNotNull(byteArrayInputStream0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType("", (InputStream) byteArrayInputStream0);
+        fail("Expecting exception: ArrayIndexOutOfBoundsException");
+      
+      } catch(ArrayIndexOutOfBoundsException e) {
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test06()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((String) null);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Name is missing
+         //
+         verifyException("org.apache.tika.mime.Patterns", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test07()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((InputStream) null);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // InputStream is missing
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test08()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      try { 
+        mimeTypes0.forName("$Y.kgrgH@b=X/3Z'");
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Invalid media type name: $Y.kgrgH@b=X/3Z'
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test09()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.forName((String) null);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Name is missing
+         //
+         verifyException("org.apache.tika.mime.MimeType", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test10()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      byte[] byteArray0 = new byte[7];
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(7, byteArrayInputStream0.available());
+      assertEquals(7, byteArray0.length);
+      assertNotNull(byteArrayInputStream0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.detect(byteArrayInputStream0, (Metadata) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test11()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      byte[] byteArray0 = new byte[7];
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3291), (byte)53);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(53, byteArrayInputStream0.available());
+      assertEquals(7, byteArray0.length);
+      assertNotNull(byteArrayInputStream0);
+      
+      Metadata metadata0 = new Metadata();
+      assertEquals(0, metadata0.size());
+      assertNotNull(metadata0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.detect(byteArrayInputStream0, metadata0);
+        fail("Expecting exception: ArrayIndexOutOfBoundsException");
+      
+      } catch(ArrayIndexOutOfBoundsException e) {
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test12()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
+      doReturn(false).when(enumeration0).hasMoreElements();
+      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
+      assertNotNull(sequenceInputStream0);
+      
+      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
+      assertNotNull(pushbackInputStream0);
+      
+      try { 
+        mimeTypes0.detect(pushbackInputStream0, (Metadata) null);
+        fail("Expecting exception: IOException");
+      
+      } catch(IOException e) {
+         //
+         // mark/reset not supported
+         //
+         verifyException("java.io.PushbackInputStream", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test13()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.addPattern((MimeType) null, (String) null, false);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Pattern and/or mime type is missing
+         //
+         verifyException("org.apache.tika.mime.Patterns", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test14()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.addPattern((MimeType) null, "j:|u");
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Pattern and/or mime type is missing
+         //
+         verifyException("org.apache.tika.mime.Patterns", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test15()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      Metadata metadata0 = new Metadata();
+      assertEquals(0, metadata0.size());
+      assertNotNull(metadata0);
+      
+      MediaType mediaType0 = mimeTypes0.detect((InputStream) null, metadata0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals(0, metadata0.size());
+      assertEquals("octet-stream", mediaType0.getSubtype());
+      assertEquals("application", mediaType0.getType());
+      assertNotNull(mediaType0);
+  }
+
+  @Test(timeout = 4000)
+  public void test16()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      byte[] byteArray0 = new byte[8];
+      MimeType mimeType0 = mimeTypes0.getMimeType(byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals(8, byteArray0.length);
+      assertNotNull(mimeType0);
+      
+      mimeTypes0.add(mimeType0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals(8, byteArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test17()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("application/octet-stream");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertNotNull(mimeType0);
+      
+      Magic magic0 = new Magic(1823);
+      assertNotNull(magic0);
+      
+      mimeType0.addMagic(magic0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertTrue(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.add(mimeType0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.Magic", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test18()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      Magic magic0 = new Magic((-3449));
+      assertNotNull(magic0);
+      
+      MimeType mimeType0 = magic0.getType();
+      assertNull(mimeType0);
+      
+      try { 
+        mimeTypes0.addAlias(mimeType0, "text/plain");
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Media type alias already exists: text/plain
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test19()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      byte[] byteArray0 = new byte[5];
+      MimeType mimeType0 = mimeTypes0.getMimeType(byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals(5, byteArray0.length);
+      assertNotNull(mimeType0);
+      
+      mimeTypes0.addAlias(mimeType0, "ZGo");
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals(5, byteArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test20()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      byte[] byteArray0 = new byte[5];
+      String string0 = mimeTypes0.getType("application/octet-stream", ">>9k;GiBSh1G9L", byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", string0);
+      assertEquals(5, byteArray0.length);
+      assertNotNull(string0);
+  }
+
+  @Test(timeout = 4000)
+  public void test21()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      byte[] byteArray0 = new byte[6];
+      String string0 = mimeTypes0.getType("+!0G7'3/IyJ", "Content-Type", byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("+!0g7'3/iyj", string0);
+      assertEquals(6, byteArray0.length);
+      assertNotNull(string0);
+  }
+
+  @Test(timeout = 4000)
+  public void test22()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      byte[] byteArray0 = new byte[1];
+      String string0 = mimeTypes0.getType((String) null, (String) null, byteArray0);
+      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", string0);
+      assertEquals(1, byteArray0.length);
+      assertNotNull(string0);
+  }
+
+  @Test(timeout = 4000)
+  public void test23()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType("k[Q!$Rg)n|C", (InputStream) null);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // InputStream is missing
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test24()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      byte[] byteArray0 = new byte[8];
+      byteArray0[0] = (byte)12;
+      MimeType mimeType0 = mimeTypes0.getMimeType(byteArray0);
+      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals(8, byteArray0.length);
+      assertNotNull(mimeType0);
+  }
+
+  @Test(timeout = 4000)
+  public void test25()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      byte[] byteArray0 = new byte[6];
+      byteArray0[0] = (byte) (-74);
+      MimeType mimeType0 = mimeTypes0.getMimeType(byteArray0);
+      assertArrayEquals(new byte[] {(byte) (-74), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertEquals(6, byteArray0.length);
+      assertNotNull(mimeType0);
+  }
+
+  @Test(timeout = 4000)
+  public void test26()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
+      doReturn(false).when(enumeration0).hasMoreElements();
+      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
+      assertNotNull(sequenceInputStream0);
+      
+      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
+      assertNotNull(pushbackInputStream0);
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("", (InputStream) pushbackInputStream0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("text/plain", mimeType0.toString());
+      assertEquals("text/plain", mimeType0.getName());
+      assertNotNull(mimeType0);
+  }
+
+  @Test(timeout = 4000)
+  public void test27()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      MimeType mimeType0 = mimeTypes0.getMimeType("Content-Type");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      assertNotNull(mimeType0);
+      
+      byte[] byteArray0 = new byte[6];
+      mimeType0.addRootXML("$Y.kgrgH@b=X/3Z'", "text/plain");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      mimeTypes0.add(mimeType0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("application/octet-stream", mimeType0.getName());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("application/octet-stream", mimeType0.toString());
+      
+      MimeType mimeType1 = mimeTypes0.getMimeType(byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType1.getDescription());
+      assertEquals("application/octet-stream", mimeType1.toString());
+      assertFalse(mimeType1.hasMagic());
+      assertEquals("application/octet-stream", mimeType1.getName());
+      assertSame(mimeType1, mimeType0);
+      assertEquals(6, byteArray0.length);
+      assertNotNull(mimeType1);
+  }
+
+  @Test(timeout = 4000)
+  public void test28()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType("G?`.Q^r[7PG*F4B;?", (byte[]) null);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Data is missing
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test29()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      MimeType mimeType0 = new MimeType(mimeTypes0, "text/plain");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("text/plain", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("text/plain", mimeType0.getName());
+      assertNotNull(mimeType0);
+      
+      mimeTypes0.addPattern(mimeType0, "dD");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("text/plain", mimeType0.toString());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals("text/plain", mimeType0.getName());
+      
+      MimeType mimeType1 = mimeTypes0.getMimeType("dD");
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertEquals("", mimeType1.getDescription());
+      assertEquals("text/plain", mimeType1.toString());
+      assertFalse(mimeType1.hasMagic());
+      assertEquals("text/plain", mimeType1.getName());
+      assertSame(mimeType1, mimeType0);
+      assertNotNull(mimeType1);
+  }
+
+  @Test(timeout = 4000)
+  public void test30()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      PipedInputStream pipedInputStream0 = new PipedInputStream(1522);
+      assertEquals(0, pipedInputStream0.available());
+      assertNotNull(pipedInputStream0);
+      
+      try { 
+        mimeTypes0.getMimeType((InputStream) pipedInputStream0);
+        fail("Expecting exception: IOException");
+      
+      } catch(IOException e) {
+         //
+         // Pipe not connected
+         //
+         verifyException("java.io.PipedInputStream", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test31()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      URL uRL0 = MockURL.getHttpExample();
+      assertNull(uRL0.getQuery());
+      assertEquals((-1), uRL0.getPort());
+      assertNull(uRL0.getUserInfo());
+      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
+      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
+      assertEquals("http", uRL0.getProtocol());
+      assertEquals((-1), uRL0.getDefaultPort());
+      assertNull(uRL0.getRef());
+      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
+      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
+      assertNotNull(uRL0);
+      
+      try { 
+        mimeTypes0.getType(uRL0);
+        fail("Expecting exception: IOException");
+      
+      } catch(IOException e) {
+         //
+         // Could not find: www.someFakeButWellFormedURL.org
+         //
+         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test32()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((File) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test33()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertEquals(1024, mimeTypes0.getMinLength());
+      assertNotNull(mimeTypes0);
+      
+      PipedInputStream pipedInputStream0 = new PipedInputStream(27);
+      assertEquals(0, pipedInputStream0.available());
+      assertNotNull(pipedInputStream0);
+      
+      try { 
+        mimeTypes0.getMimeType(",0{1lw 0&", (InputStream) pipedInputStream0);
+        fail("Expecting exception: IOException");
+      
+      } catch(IOException e) {
+         //
+         // Pipe not connected
+         //
+         verifyException("java.io.PipedInputStream", e);
+      }
+  }
+}
