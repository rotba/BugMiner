diff --git a/tika-core/src/test/java/org/apache/tika/mime/MimeTypesReader_ESTest.java b/tika-core/src/test/java/org/apache/tika/mime/MimeTypesReader_ESTest.java
new file mode 100644
index 000000000..e569bfd44
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/mime/MimeTypesReader_ESTest.java
@@ -0,0 +1,180 @@
+/*
+ * This file was automatically generated by EvoSuite
+ * Wed Aug 14 13:45:38 GMT 2019
+ */
+
+package org.apache.tika.mime;
+
+import org.junit.Test;
+import static org.junit.Assert.*;
+import static org.evosuite.runtime.EvoAssertions.*;
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.PipedInputStream;
+import java.net.MalformedURLException;
+import org.apache.html.dom.HTMLDocumentImpl;
+import org.apache.tika.mime.MimeTypes;
+import org.apache.tika.mime.MimeTypesReader;
+import org.apache.xerces.dom.CoreDocumentImpl;
+import org.evosuite.runtime.EvoRunner;
+import org.evosuite.runtime.EvoRunnerParameters;
+import org.junit.runner.RunWith;
+
+@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
+public class MimeTypesReader_ESTest extends MimeTypesReader_ESTest_scaffolding {
+
+  @Test(timeout = 4000)
+  public void test0()  throws Throwable  {
+      MimeTypesReader mimeTypesReader0 = new MimeTypesReader((MimeTypes) null);
+      assertNotNull(mimeTypesReader0);
+      
+      byte[] byteArray0 = new byte[3];
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1246);
+      assertNotNull(byteArrayInputStream0);
+      assertEquals(3, byteArrayInputStream0.available());
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(3, byteArray0.length);
+      
+      try { 
+        mimeTypesReader0.read(byteArrayInputStream0);
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Invalid type configuration
+         //
+         verifyException("org.apache.tika.mime.MimeTypesReader", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test1()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(8192, mimeTypes0.getMinLength());
+      
+      MimeTypesReader mimeTypesReader0 = new MimeTypesReader(mimeTypes0);
+      assertNotNull(mimeTypesReader0);
+      assertEquals(8192, mimeTypes0.getMinLength());
+      
+      try { 
+        mimeTypesReader0.read((InputStream) null);
+        fail("Expecting exception: MalformedURLException");
+      
+      } catch(MalformedURLException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("java.net.URL", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test2()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(8192, mimeTypes0.getMinLength());
+      
+      MimeTypesReader mimeTypesReader0 = new MimeTypesReader(mimeTypes0);
+      assertNotNull(mimeTypesReader0);
+      assertEquals(8192, mimeTypes0.getMinLength());
+      
+      PipedInputStream pipedInputStream0 = new PipedInputStream();
+      assertNotNull(pipedInputStream0);
+      assertEquals(0, pipedInputStream0.available());
+      
+      try { 
+        mimeTypesReader0.read(pipedInputStream0);
+        fail("Expecting exception: IOException");
+      
+      } catch(IOException e) {
+         //
+         // Pipe not connected
+         //
+         verifyException("java.io.PipedInputStream", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test3()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(8192, mimeTypes0.getMinLength());
+      
+      MimeTypesReader mimeTypesReader0 = new MimeTypesReader(mimeTypes0);
+      assertNotNull(mimeTypesReader0);
+      assertEquals(8192, mimeTypes0.getMinLength());
+      
+      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
+      assertNotNull(hTMLDocumentImpl0);
+      assertNull(hTMLDocumentImpl0.getDomain());
+      assertNull(hTMLDocumentImpl0.getURL());
+      assertNull(hTMLDocumentImpl0.getCookie());
+      assertNull(hTMLDocumentImpl0.getReferrer());
+      
+      try { 
+        mimeTypesReader0.read(hTMLDocumentImpl0);
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Not a <mime-info/> configuration document: HTML
+         //
+         verifyException("org.apache.tika.mime.MimeTypesReader", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test4()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(8192, mimeTypes0.getMinLength());
+      
+      MimeTypesReader mimeTypesReader0 = new MimeTypesReader(mimeTypes0);
+      assertNotNull(mimeTypesReader0);
+      assertEquals(8192, mimeTypes0.getMinLength());
+      
+      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(false);
+      assertNotNull(coreDocumentImpl0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypesReader0.read(coreDocumentImpl0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MimeTypesReader", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test5()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      assertNotNull(mimeTypes0);
+      assertEquals(8192, mimeTypes0.getMinLength());
+      
+      MimeTypesReader mimeTypesReader0 = new MimeTypesReader(mimeTypes0);
+      assertNotNull(mimeTypesReader0);
+      assertEquals(8192, mimeTypes0.getMinLength());
+      
+      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
+      assertNotNull(dataInputStream0);
+      
+      // Undeclared exception!
+      try { 
+        mimeTypesReader0.read(dataInputStream0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("java.io.FilterInputStream", e);
+      }
+  }
+}
