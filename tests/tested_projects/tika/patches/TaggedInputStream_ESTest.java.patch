diff --git a/tika-core/src/test/java/org/apache/tika/io/TaggedInputStream_ESTest.java b/tika-core/src/test/java/org/apache/tika/io/TaggedInputStream_ESTest.java
new file mode 100644
index 000000000..5d168e01f
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/io/TaggedInputStream_ESTest.java
@@ -0,0 +1,121 @@
+/*
+ * This file was automatically generated by EvoSuite
+ * Sun Aug 11 13:42:41 GMT 2019
+ */
+
+package org.apache.tika.io;
+
+import org.junit.Test;
+import static org.junit.Assert.*;
+import static org.evosuite.shaded.org.mockito.Mockito.*;
+import static org.evosuite.runtime.EvoAssertions.*;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.PipedInputStream;
+import java.io.SequenceInputStream;
+import java.util.Enumeration;
+import org.apache.tika.io.TaggedIOException;
+import org.apache.tika.io.TaggedInputStream;
+import org.evosuite.runtime.EvoRunner;
+import org.evosuite.runtime.EvoRunnerParameters;
+import org.evosuite.runtime.ViolatedAssumptionAnswer;
+import org.evosuite.runtime.mock.java.io.MockIOException;
+import org.junit.runner.RunWith;
+
+@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
+public class TaggedInputStream_ESTest extends TaggedInputStream_ESTest_scaffolding {
+
+  @Test(timeout = 4000)
+  public void test0()  throws Throwable  {
+      TaggedInputStream taggedInputStream0 = TaggedInputStream.get((InputStream) null);
+      MockIOException mockIOException0 = new MockIOException();
+      try { 
+        taggedInputStream0.handleIOException(mockIOException0);
+        fail("Expecting exception: IOException");
+      
+      } catch(IOException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.io.TaggedInputStream", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test1()  throws Throwable  {
+      PipedInputStream pipedInputStream0 = new PipedInputStream();
+      TaggedInputStream taggedInputStream0 = TaggedInputStream.get(pipedInputStream0);
+      MockIOException mockIOException0 = new MockIOException((String) null);
+      TaggedIOException taggedIOException0 = new TaggedIOException(mockIOException0, (Object) null);
+      taggedInputStream0.throwIfCauseOf(taggedIOException0);
+  }
+
+  @Test(timeout = 4000)
+  public void test2()  throws Throwable  {
+      byte[] byteArray0 = new byte[4];
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte) (-92));
+      TaggedInputStream taggedInputStream0 = new TaggedInputStream(byteArrayInputStream0);
+      MockIOException mockIOException0 = new MockIOException("Tika Tagged InputStream wrapping java.io.ByteArrayInputStream@f44b53");
+      taggedInputStream0.throwIfCauseOf(mockIOException0);
+  }
+
+  @Test(timeout = 4000)
+  public void test3()  throws Throwable  {
+      byte[] byteArray0 = new byte[4];
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte) (-92));
+      TaggedInputStream taggedInputStream0 = new TaggedInputStream(byteArrayInputStream0);
+      MockIOException mockIOException0 = new MockIOException("Tika Tagged InputStream wrapping java.io.ByteArrayInputStream@f44b53");
+      Object object0 = new Object();
+      TaggedIOException taggedIOException0 = new TaggedIOException(mockIOException0, object0);
+      boolean boolean0 = taggedInputStream0.isCauseOf(taggedIOException0);
+      assertFalse(boolean0);
+  }
+
+  @Test(timeout = 4000)
+  public void test4()  throws Throwable  {
+      byte[] byteArray0 = new byte[5];
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
+      TaggedInputStream taggedInputStream0 = TaggedInputStream.get(byteArrayInputStream0);
+      MockIOException mockIOException0 = new MockIOException();
+      boolean boolean0 = taggedInputStream0.isCauseOf(mockIOException0);
+      assertFalse(boolean0);
+  }
+
+  @Test(timeout = 4000)
+  public void test5()  throws Throwable  {
+      byte[] byteArray0 = new byte[4];
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte) (-92));
+      TaggedInputStream taggedInputStream0 = new TaggedInputStream(byteArrayInputStream0);
+      TaggedInputStream taggedInputStream1 = TaggedInputStream.get(taggedInputStream0);
+      assertSame(taggedInputStream1, taggedInputStream0);
+  }
+
+  @Test(timeout = 4000)
+  public void test6()  throws Throwable  {
+      Enumeration<TaggedInputStream> enumeration0 = (Enumeration<TaggedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
+      doReturn(false).when(enumeration0).hasMoreElements();
+      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
+      TaggedInputStream taggedInputStream0 = TaggedInputStream.get(sequenceInputStream0);
+      // Undeclared exception!
+      try { 
+        taggedInputStream0.handleIOException((IOException) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.io.TaggedIOException", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test7()  throws Throwable  {
+      TaggedInputStream taggedInputStream0 = TaggedInputStream.get((InputStream) null);
+      assertNotNull(taggedInputStream0);
+      
+      String string0 = taggedInputStream0.toString();
+      assertEquals("Tika Tagged InputStream wrapping null", string0);
+  }
+}
