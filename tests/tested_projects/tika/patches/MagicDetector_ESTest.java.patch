diff --git a/tika-core/src/test/java/org/apache/tika/detect/MagicDetector_ESTest.java b/tika-core/src/test/java/org/apache/tika/detect/MagicDetector_ESTest.java
new file mode 100644
index 000000000..5e4fc5a7d
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/detect/MagicDetector_ESTest.java
@@ -0,0 +1,495 @@
+/*
+ * This file was automatically generated by EvoSuite
+ * Wed Aug 14 13:40:49 GMT 2019
+ */
+
+package org.apache.tika.detect;
+
+import org.junit.Test;
+import static org.junit.Assert.*;
+import static org.evosuite.runtime.EvoAssertions.*;
+import java.io.BufferedInputStream;
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.SequenceInputStream;
+import java.util.HashMap;
+import org.apache.tika.detect.MagicDetector;
+import org.apache.tika.metadata.Metadata;
+import org.apache.tika.mime.MediaType;
+import org.evosuite.runtime.EvoRunner;
+import org.evosuite.runtime.EvoRunnerParameters;
+import org.junit.runner.RunWith;
+
+@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
+public class MagicDetector_ESTest extends MagicDetector_ESTest_scaffolding {
+
+  @Test(timeout = 4000)
+  public void test00()  throws Throwable  {
+      MediaType mediaType0 = MediaType.APPLICATION_XML;
+      assertEquals("application", mediaType0.getType());
+      assertEquals("xml", mediaType0.getSubtype());
+      assertNotNull(mediaType0);
+      
+      byte[] byteArray0 = new byte[1];
+      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, 12);
+      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
+      assertEquals("application", mediaType0.getType());
+      assertEquals("xml", mediaType0.getSubtype());
+      assertNotNull(magicDetector0);
+      assertEquals(1, byteArray0.length);
+      
+      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
+      assertNotNull(dataInputStream0);
+      
+      Metadata metadata0 = new Metadata();
+      assertEquals(0, metadata0.size());
+      assertNotNull(metadata0);
+      
+      // Undeclared exception!
+      try { 
+        magicDetector0.detect(dataInputStream0, metadata0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("java.io.FilterInputStream", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test01()  throws Throwable  {
+      MediaType mediaType0 = MediaType.text("[");
+      assertEquals("[", mediaType0.getSubtype());
+      assertEquals("text", mediaType0.getType());
+      assertNotNull(mediaType0);
+      
+      byte[] byteArray0 = new byte[8];
+      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, 0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals("[", mediaType0.getSubtype());
+      assertEquals("text", mediaType0.getType());
+      assertNotNull(magicDetector0);
+      assertEquals(8, byteArray0.length);
+      
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3049), (byte)1);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(1, byteArrayInputStream0.available());
+      assertNotNull(byteArrayInputStream0);
+      assertEquals(8, byteArray0.length);
+      
+      Metadata metadata0 = new Metadata();
+      assertEquals(0, metadata0.size());
+      assertNotNull(metadata0);
+      
+      // Undeclared exception!
+      try { 
+        magicDetector0.detect(byteArrayInputStream0, metadata0);
+        fail("Expecting exception: ArrayIndexOutOfBoundsException");
+      
+      } catch(ArrayIndexOutOfBoundsException e) {
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test02()  throws Throwable  {
+      MediaType mediaType0 = MediaType.APPLICATION_XML;
+      assertEquals("application", mediaType0.getType());
+      assertEquals("xml", mediaType0.getSubtype());
+      assertNotNull(mediaType0);
+      
+      byte[] byteArray0 = new byte[2];
+      byteArray0[0] = (byte) (-120);
+      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0);
+      assertArrayEquals(new byte[] {(byte) (-120), (byte)0}, byteArray0);
+      assertEquals("application", mediaType0.getType());
+      assertEquals("xml", mediaType0.getSubtype());
+      assertNotNull(magicDetector0);
+      assertEquals(2, byteArray0.length);
+      
+      byte[] byteArray1 = new byte[7];
+      assertFalse(byteArray1.equals((Object)byteArray0));
+      
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
+      assertEquals(7, byteArrayInputStream0.available());
+      assertFalse(byteArray1.equals((Object)byteArray0));
+      assertNotNull(byteArrayInputStream0);
+      assertEquals(7, byteArray1.length);
+      
+      Metadata metadata0 = new Metadata();
+      assertEquals(0, metadata0.size());
+      assertNotNull(metadata0);
+      
+      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
+      assertArrayEquals(new byte[] {(byte) (-120), (byte)0}, byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
+      assertEquals("application", mediaType0.getType());
+      assertEquals("xml", mediaType0.getSubtype());
+      assertEquals(7, byteArrayInputStream0.available());
+      assertEquals(0, metadata0.size());
+      assertEquals("octet-stream", mediaType1.getSubtype());
+      assertEquals("application", mediaType1.getType());
+      assertFalse(byteArray0.equals((Object)byteArray1));
+      assertFalse(byteArray1.equals((Object)byteArray0));
+      assertFalse(mediaType1.equals((Object)mediaType0));
+      assertNotNull(mediaType1);
+      assertNotSame(mediaType0, mediaType1);
+      assertNotSame(byteArray0, byteArray1);
+      assertNotSame(byteArray1, byteArray0);
+      assertNotSame(mediaType1, mediaType0);
+      assertEquals(2, byteArray0.length);
+      assertEquals(7, byteArray1.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test03()  throws Throwable  {
+      MediaType mediaType0 = MediaType.TEXT_PLAIN;
+      assertEquals("plain", mediaType0.getSubtype());
+      assertEquals("text", mediaType0.getType());
+      assertNotNull(mediaType0);
+      
+      byte[] byteArray0 = new byte[3];
+      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals("plain", mediaType0.getSubtype());
+      assertEquals("text", mediaType0.getType());
+      assertNotNull(magicDetector0);
+      assertEquals(3, byteArray0.length);
+      
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(3, byteArrayInputStream0.available());
+      assertNotNull(byteArrayInputStream0);
+      assertEquals(3, byteArray0.length);
+      
+      Metadata metadata0 = new Metadata();
+      assertEquals(0, metadata0.size());
+      assertNotNull(metadata0);
+      
+      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals("plain", mediaType0.getSubtype());
+      assertEquals("text", mediaType0.getType());
+      assertEquals(3, byteArrayInputStream0.available());
+      assertEquals(0, metadata0.size());
+      assertEquals("plain", mediaType1.getSubtype());
+      assertEquals("text", mediaType1.getType());
+      assertNotNull(mediaType1);
+      assertSame(mediaType0, mediaType1);
+      assertSame(mediaType1, mediaType0);
+      assertEquals(3, byteArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test04()  throws Throwable  {
+      HashMap<String, String> hashMap0 = new HashMap<String, String>();
+      assertEquals(0, hashMap0.size());
+      assertTrue(hashMap0.isEmpty());
+      assertNotNull(hashMap0);
+      
+      MediaType mediaType0 = new MediaType("_PNtx{w", "_PNtx{w", hashMap0);
+      assertEquals(0, hashMap0.size());
+      assertTrue(hashMap0.isEmpty());
+      assertEquals("_pntx{w", mediaType0.getSubtype());
+      assertEquals("_pntx{w", mediaType0.getType());
+      assertNotNull(mediaType0);
+      
+      byte[] byteArray0 = new byte[3];
+      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, (byte)64);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(0, hashMap0.size());
+      assertTrue(hashMap0.isEmpty());
+      assertEquals("_pntx{w", mediaType0.getSubtype());
+      assertEquals("_pntx{w", mediaType0.getType());
+      assertNotNull(magicDetector0);
+      assertEquals(3, byteArray0.length);
+      
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(3, byteArrayInputStream0.available());
+      assertNotNull(byteArrayInputStream0);
+      assertEquals(3, byteArray0.length);
+      
+      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(3, byteArrayInputStream0.available());
+      assertNotNull(sequenceInputStream0);
+      assertEquals(3, byteArray0.length);
+      
+      try { 
+        magicDetector0.detect(sequenceInputStream0, (Metadata) null);
+        fail("Expecting exception: IOException");
+      
+      } catch(IOException e) {
+         //
+         // mark/reset not supported
+         //
+         verifyException("java.io.InputStream", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test05()  throws Throwable  {
+      MediaType mediaType0 = MediaType.audio("llkh?Y>x&`{sK'*j");
+      assertEquals("llkh?y>x&`{sk'*j", mediaType0.getSubtype());
+      assertEquals("audio", mediaType0.getType());
+      assertNotNull(mediaType0);
+      
+      byte[] byteArray0 = new byte[3];
+      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, 1);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals("llkh?y>x&`{sk'*j", mediaType0.getSubtype());
+      assertEquals("audio", mediaType0.getType());
+      assertNotNull(magicDetector0);
+      assertEquals(3, byteArray0.length);
+      
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(3, byteArrayInputStream0.available());
+      assertNotNull(byteArrayInputStream0);
+      assertEquals(3, byteArray0.length);
+      
+      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(3, byteArrayInputStream0.available());
+      assertNotNull(bufferedInputStream0);
+      assertEquals(3, byteArray0.length);
+      
+      MediaType mediaType1 = magicDetector0.detect(bufferedInputStream0, (Metadata) null);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals("llkh?y>x&`{sk'*j", mediaType0.getSubtype());
+      assertEquals("audio", mediaType0.getType());
+      assertEquals(0, byteArrayInputStream0.available());
+      assertEquals("octet-stream", mediaType1.getSubtype());
+      assertEquals("application", mediaType1.getType());
+      assertFalse(mediaType1.equals((Object)mediaType0));
+      assertNotNull(mediaType1);
+      assertNotSame(mediaType0, mediaType1);
+      assertNotSame(mediaType1, mediaType0);
+      assertEquals(3, byteArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test06()  throws Throwable  {
+      MediaType mediaType0 = MediaType.application("PROPER_NAME");
+      assertEquals("application", mediaType0.getType());
+      assertEquals("proper_name", mediaType0.getSubtype());
+      assertNotNull(mediaType0);
+      
+      byte[] byteArray0 = new byte[9];
+      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals("application", mediaType0.getType());
+      assertEquals("proper_name", mediaType0.getSubtype());
+      assertNotNull(magicDetector0);
+      assertEquals(9, byteArray0.length);
+      
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)45, 667);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals((-36), byteArrayInputStream0.available());
+      assertNotNull(byteArrayInputStream0);
+      assertEquals(9, byteArray0.length);
+      
+      Metadata metadata0 = new Metadata();
+      assertEquals(0, metadata0.size());
+      assertNotNull(metadata0);
+      
+      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals("application", mediaType0.getType());
+      assertEquals("proper_name", mediaType0.getSubtype());
+      assertEquals((-36), byteArrayInputStream0.available());
+      assertEquals(0, metadata0.size());
+      assertEquals("application", mediaType1.getType());
+      assertEquals("octet-stream", mediaType1.getSubtype());
+      assertFalse(mediaType1.equals((Object)mediaType0));
+      assertNotNull(mediaType1);
+      assertNotSame(mediaType0, mediaType1);
+      assertNotSame(mediaType1, mediaType0);
+      assertEquals(9, byteArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test07()  throws Throwable  {
+      MediaType mediaType0 = MediaType.audio("tox0'");
+      assertEquals("tox0'", mediaType0.getSubtype());
+      assertEquals("audio", mediaType0.getType());
+      assertNotNull(mediaType0);
+      
+      byte[] byteArray0 = new byte[3];
+      byte[] byteArray1 = new byte[8];
+      assertFalse(byteArray1.equals((Object)byteArray0));
+      
+      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray1, (byte)0, 0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
+      assertEquals("tox0'", mediaType0.getSubtype());
+      assertEquals("audio", mediaType0.getType());
+      assertFalse(byteArray0.equals((Object)byteArray1));
+      assertFalse(byteArray1.equals((Object)byteArray0));
+      assertNotNull(magicDetector0);
+      assertEquals(3, byteArray0.length);
+      assertEquals(8, byteArray1.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test08()  throws Throwable  {
+      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
+      assertEquals("application", mediaType0.getType());
+      assertEquals("zip", mediaType0.getSubtype());
+      assertNotNull(mediaType0);
+      
+      byte[] byteArray0 = new byte[1];
+      byte[] byteArray1 = new byte[0];
+      assertFalse(byteArray1.equals((Object)byteArray0));
+      
+      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray1, (byte)0, 21);
+      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
+      assertArrayEquals(new byte[] {}, byteArray1);
+      assertEquals("application", mediaType0.getType());
+      assertEquals("zip", mediaType0.getSubtype());
+      assertFalse(byteArray0.equals((Object)byteArray1));
+      assertFalse(byteArray1.equals((Object)byteArray0));
+      assertNotNull(magicDetector0);
+      assertEquals(1, byteArray0.length);
+      assertEquals(0, byteArray1.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test09()  throws Throwable  {
+      MediaType mediaType0 = MediaType.TEXT_PLAIN;
+      assertEquals("plain", mediaType0.getSubtype());
+      assertEquals("text", mediaType0.getType());
+      assertNotNull(mediaType0);
+      
+      byte[] byteArray0 = new byte[1];
+      MagicDetector magicDetector0 = null;
+      try {
+        magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, 3241, (byte) (-1));
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Invalid offset range: [3241,-1]
+         //
+         verifyException("org.apache.tika.detect.MagicDetector", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test10()  throws Throwable  {
+      MediaType mediaType0 = MediaType.TEXT_PLAIN;
+      assertEquals("text", mediaType0.getType());
+      assertEquals("plain", mediaType0.getSubtype());
+      assertNotNull(mediaType0);
+      
+      byte[] byteArray0 = new byte[2];
+      MagicDetector magicDetector0 = null;
+      try {
+        magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, (byte) (-27), (byte) (-27));
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Invalid offset range: [-27,-27]
+         //
+         verifyException("org.apache.tika.detect.MagicDetector", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test11()  throws Throwable  {
+      MediaType mediaType0 = MediaType.APPLICATION_XML;
+      assertEquals("application", mediaType0.getType());
+      assertEquals("xml", mediaType0.getSubtype());
+      assertNotNull(mediaType0);
+      
+      MagicDetector magicDetector0 = null;
+      try {
+        magicDetector0 = new MagicDetector(mediaType0, (byte[]) null, 1869);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Magic match pattern is null
+         //
+         verifyException("org.apache.tika.detect.MagicDetector", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test12()  throws Throwable  {
+      byte[] byteArray0 = new byte[1];
+      MagicDetector magicDetector0 = null;
+      try {
+        magicDetector0 = new MagicDetector((MediaType) null, byteArray0);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Matching media type is null
+         //
+         verifyException("org.apache.tika.detect.MagicDetector", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test13()  throws Throwable  {
+      MediaType mediaType0 = MediaType.TEXT_PLAIN;
+      assertEquals("text", mediaType0.getType());
+      assertEquals("plain", mediaType0.getSubtype());
+      assertNotNull(mediaType0);
+      
+      byte[] byteArray0 = new byte[0];
+      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0);
+      assertArrayEquals(new byte[] {}, byteArray0);
+      assertEquals("text", mediaType0.getType());
+      assertEquals("plain", mediaType0.getSubtype());
+      assertNotNull(magicDetector0);
+      assertEquals(0, byteArray0.length);
+      
+      String string0 = magicDetector0.toString();
+      assertArrayEquals(new byte[] {}, byteArray0);
+      assertEquals("text", mediaType0.getType());
+      assertEquals("plain", mediaType0.getSubtype());
+      assertNotNull(string0);
+      assertEquals(0, byteArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test14()  throws Throwable  {
+      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
+      assertEquals("application", mediaType0.getType());
+      assertEquals("zip", mediaType0.getSubtype());
+      assertNotNull(mediaType0);
+      
+      byte[] byteArray0 = new byte[1];
+      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0);
+      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
+      assertEquals("application", mediaType0.getType());
+      assertEquals("zip", mediaType0.getSubtype());
+      assertNotNull(magicDetector0);
+      assertEquals(1, byteArray0.length);
+      
+      Metadata metadata0 = new Metadata();
+      assertEquals(0, metadata0.size());
+      assertNotNull(metadata0);
+      
+      MediaType mediaType1 = magicDetector0.detect((InputStream) null, metadata0);
+      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
+      assertEquals("application", mediaType0.getType());
+      assertEquals("zip", mediaType0.getSubtype());
+      assertEquals(0, metadata0.size());
+      assertEquals("octet-stream", mediaType1.getSubtype());
+      assertEquals("application", mediaType1.getType());
+      assertFalse(mediaType1.equals((Object)mediaType0));
+      assertNotNull(mediaType1);
+      assertNotSame(mediaType0, mediaType1);
+      assertNotSame(mediaType1, mediaType0);
+      assertEquals(1, byteArray0.length);
+  }
+}
