diff --git a/tika-core/src/test/java/org/apache/tika/detect/TextDetector_ESTest.java b/tika-core/src/test/java/org/apache/tika/detect/TextDetector_ESTest.java
new file mode 100644
index 000000000..ab8a50be7
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/detect/TextDetector_ESTest.java
@@ -0,0 +1,103 @@
+/*
+ * This file was automatically generated by EvoSuite
+ * Sun Aug 11 08:52:38 GMT 2019
+ */
+
+package org.apache.tika.detect;
+
+import org.junit.Test;
+import static org.junit.Assert.*;
+import static org.evosuite.runtime.EvoAssertions.*;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.SequenceInputStream;
+import org.apache.tika.detect.TextDetector;
+import org.apache.tika.metadata.Metadata;
+import org.apache.tika.mime.MediaType;
+import org.evosuite.runtime.EvoRunner;
+import org.evosuite.runtime.EvoRunnerParameters;
+import org.junit.runner.RunWith;
+
+@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
+public class TextDetector_ESTest extends TextDetector_ESTest_scaffolding {
+
+  @Test(timeout = 4000)
+  public void test0()  throws Throwable  {
+      TextDetector textDetector0 = new TextDetector();
+      byte[] byteArray0 = new byte[5];
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-5), 219);
+      Metadata metadata0 = new Metadata();
+      // Undeclared exception!
+      try { 
+        textDetector0.detect(byteArrayInputStream0, metadata0);
+        fail("Expecting exception: ArrayIndexOutOfBoundsException");
+      
+      } catch(ArrayIndexOutOfBoundsException e) {
+         //
+         // -5
+         //
+         verifyException("java.io.ByteArrayInputStream", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test1()  throws Throwable  {
+      TextDetector textDetector0 = new TextDetector();
+      byte[] byteArray0 = new byte[1];
+      byteArray0[0] = (byte)27;
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
+      Metadata metadata0 = new Metadata();
+      MediaType mediaType0 = textDetector0.detect(byteArrayInputStream0, metadata0);
+      assertEquals("plain", mediaType0.getSubtype());
+  }
+
+  @Test(timeout = 4000)
+  public void test2()  throws Throwable  {
+      TextDetector textDetector0 = new TextDetector();
+      byte[] byteArray0 = new byte[0];
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-407), (-407));
+      Metadata metadata0 = new Metadata();
+      MediaType mediaType0 = textDetector0.detect(byteArrayInputStream0, metadata0);
+      assertEquals("application", mediaType0.getType());
+  }
+
+  @Test(timeout = 4000)
+  public void test3()  throws Throwable  {
+      TextDetector textDetector0 = new TextDetector();
+      byte[] byteArray0 = new byte[2];
+      byteArray0[0] = (byte) (-1);
+      byteArray0[1] = (byte)45;
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
+      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
+      Metadata metadata0 = new Metadata();
+      try { 
+        textDetector0.detect(sequenceInputStream0, metadata0);
+        fail("Expecting exception: IOException");
+      
+      } catch(IOException e) {
+         //
+         // mark/reset not supported
+         //
+         verifyException("java.io.InputStream", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test4()  throws Throwable  {
+      TextDetector textDetector0 = new TextDetector();
+      Metadata metadata0 = new Metadata();
+      MediaType mediaType0 = textDetector0.detect((InputStream) null, metadata0);
+      assertEquals("octet-stream", mediaType0.getSubtype());
+  }
+
+  @Test(timeout = 4000)
+  public void test5()  throws Throwable  {
+      TextDetector textDetector0 = new TextDetector();
+      Metadata metadata0 = new Metadata();
+      byte[] byteArray0 = new byte[6];
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
+      MediaType mediaType0 = textDetector0.detect(byteArrayInputStream0, metadata0);
+      assertEquals("application", mediaType0.getType());
+  }
+}
