diff --git a/tika-core/src/test/java/org/apache/tika/mime/MimeTypes_ESTest.java b/tika-core/src/test/java/org/apache/tika/mime/MimeTypes_ESTest.java
new file mode 100644
index 000000000..9653266d4
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/mime/MimeTypes_ESTest.java
@@ -0,0 +1,571 @@
+/*
+ * This file was automatically generated by EvoSuite
+ * Sun Aug 11 08:51:38 GMT 2019
+ */
+
+package org.apache.tika.mime;
+
+import org.junit.Test;
+import static org.junit.Assert.*;
+import static org.evosuite.runtime.EvoAssertions.*;
+import java.io.BufferedInputStream;
+import java.io.ByteArrayInputStream;
+import java.io.File;
+import java.io.FileDescriptor;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.PipedInputStream;
+import java.io.PushbackInputStream;
+import java.io.SequenceInputStream;
+import java.net.URI;
+import java.net.URL;
+import java.util.regex.PatternSyntaxException;
+import org.apache.tika.detect.MagicDetector;
+import org.apache.tika.metadata.Metadata;
+import org.apache.tika.mime.AndClause;
+import org.apache.tika.mime.Clause;
+import org.apache.tika.mime.Magic;
+import org.apache.tika.mime.MagicMatch;
+import org.apache.tika.mime.MediaType;
+import org.apache.tika.mime.MediaTypeRegistry;
+import org.apache.tika.mime.MimeType;
+import org.apache.tika.mime.MimeTypes;
+import org.evosuite.runtime.EvoRunner;
+import org.evosuite.runtime.EvoRunnerParameters;
+import org.evosuite.runtime.mock.java.io.MockFile;
+import org.evosuite.runtime.mock.java.io.MockFileInputStream;
+import org.evosuite.runtime.mock.java.net.MockURI;
+import org.evosuite.runtime.mock.java.net.MockURL;
+import org.junit.runner.RunWith;
+
+@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
+public class MimeTypes_ESTest extends MimeTypes_ESTest_scaffolding {
+
+  @Test(timeout = 4000)
+  public void test00()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      int int0 = mimeTypes0.getMinLength();
+      assertEquals(8192, int0);
+  }
+
+  @Test(timeout = 4000)
+  public void test01()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      MediaType mediaType0 = MediaType.APPLICATION_XML;
+      // Undeclared exception!
+      try { 
+        mimeTypes0.setSuperType((MimeType) null, mediaType0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test02()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      URL uRL0 = MockURL.getHttpExample();
+      try { 
+        mimeTypes0.getType(uRL0);
+        fail("Expecting exception: IOException");
+      
+      } catch(IOException e) {
+         //
+         // Could not find: www.someFakeButWellFormedURL.org
+         //
+         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test03()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getType("fa~#X", "fa~#X", (byte[]) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("java.io.ByteArrayInputStream", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test04()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((byte[]) null);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Data is missing
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test05()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      byte[] byteArray0 = new byte[1];
+      MimeType mimeType0 = mimeTypes0.getMimeType("*", byteArray0);
+      mimeTypes0.addPattern(mimeType0, "*", true);
+      URL uRL0 = MockURL.getHttpExample();
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType(uRL0);
+        fail("Expecting exception: PatternSyntaxException");
+      
+      } catch(PatternSyntaxException e) {
+         //
+         // Dangling meta character '*' near index 0\r
+         // *\r
+         // ^
+         //
+         verifyException("java.util.regex.Pattern", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test06()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((URL) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test07()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType("kIHRZ[2", (InputStream) null);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // InputStream is missing
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test08()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      PipedInputStream pipedInputStream0 = new PipedInputStream();
+      try { 
+        mimeTypes0.getMimeType("", (InputStream) pipedInputStream0);
+        fail("Expecting exception: IOException");
+      
+      } catch(IOException e) {
+         //
+         // Pipe not connected
+         //
+         verifyException("java.io.PipedInputStream", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test09()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      MediaType mediaType0 = MediaType.audio("application/xml");
+      MimeType mimeType0 = new MimeType(mediaType0);
+      mimeTypes0.addPattern(mimeType0, "#5'#{!FD", true);
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType("");
+        fail("Expecting exception: PatternSyntaxException");
+      
+      } catch(PatternSyntaxException e) {
+         //
+         // Illegal repetition near index 3\r
+         // #5'#{!FD\r
+         //    ^
+         //
+         verifyException("java.util.regex.Pattern", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test10()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((String) null);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Name is missing
+         //
+         verifyException("org.apache.tika.mime.Patterns", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test11()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      FileDescriptor fileDescriptor0 = new FileDescriptor();
+      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
+      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
+      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
+      try { 
+        mimeTypes0.getMimeType((InputStream) sequenceInputStream0);
+        fail("Expecting exception: IOException");
+      
+      } catch(IOException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test12()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((File) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test13()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      try { 
+        mimeTypes0.forName("b(qOt|AmaCWbf4");
+        fail("Expecting exception: Exception");
+      
+      } catch(Exception e) {
+         //
+         // Invalid media type name: b(qOt|AmaCWbf4
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test14()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      byte[] byteArray0 = new byte[2];
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)21, 2991);
+      // Undeclared exception!
+      try { 
+        mimeTypes0.detect(byteArrayInputStream0, (Metadata) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test15()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      byte[] byteArray0 = new byte[6];
+      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3090), 27);
+      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
+      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
+      Metadata metadata0 = new Metadata();
+      // Undeclared exception!
+      try { 
+        mimeTypes0.detect(bufferedInputStream0, metadata0);
+        fail("Expecting exception: ArrayIndexOutOfBoundsException");
+      
+      } catch(ArrayIndexOutOfBoundsException e) {
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test16()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      MockFile mockFile0 = new MockFile("application/xml");
+      File file0 = MockFile.createTempFile("text/plain", "text/plain", (File) mockFile0);
+      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
+      Metadata metadata0 = new Metadata();
+      try { 
+        mimeTypes0.detect(mockFileInputStream0, metadata0);
+        fail("Expecting exception: IOException");
+      
+      } catch(IOException e) {
+         //
+         // mark/reset not supported
+         //
+         verifyException("java.io.InputStream", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test17()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      // Undeclared exception!
+      try { 
+        mimeTypes0.addPattern((MimeType) null, "", true);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Pattern and/or mime type is missing
+         //
+         verifyException("org.apache.tika.mime.Patterns", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test18()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      // Undeclared exception!
+      try { 
+        mimeTypes0.addPattern((MimeType) null, "1r,%yK~7%;4S8cj*");
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Pattern and/or mime type is missing
+         //
+         verifyException("org.apache.tika.mime.Patterns", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test19()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      MediaType mediaType0 = MediaType.TEXT_PLAIN;
+      // Undeclared exception!
+      try { 
+        mimeTypes0.addAlias((MimeType) null, mediaType0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test20()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      Magic magic0 = new Magic(mimeType0);
+      Clause[] clauseArray0 = new Clause[7];
+      MediaType mediaType0 = new MediaType("M", "8");
+      byte[] byteArray0 = new byte[2];
+      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0);
+      MagicMatch magicMatch0 = new MagicMatch(magicDetector0, (byte)111);
+      clauseArray0[0] = (Clause) magicMatch0;
+      clauseArray0[1] = (Clause) magic0;
+      AndClause andClause0 = new AndClause(clauseArray0);
+      magic0.setClause(andClause0);
+      mimeType0.addMagic(magic0);
+      // Undeclared exception!
+      try { 
+        mimeTypes0.add(mimeType0);
+        fail("Expecting exception: StackOverflowError");
+      
+      } catch(StackOverflowError e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test21()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      byte[] byteArray0 = new byte[2];
+      MimeType mimeType0 = mimeTypes0.getMimeType("STRUCTURE", byteArray0);
+      MediaType mediaType0 = MediaType.TEXT_PLAIN;
+      mimeTypes0.setSuperType(mimeType0, mediaType0);
+      String string0 = mimeTypes0.getType("application/xml", "STRUCTURE", byteArray0);
+      assertEquals("application/xml", string0);
+      assertEquals(8192, mimeTypes0.getMinLength());
+  }
+
+  @Test(timeout = 4000)
+  public void test22()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      byte[] byteArray0 = new byte[9];
+      String string0 = mimeTypes0.getType("Comments", "Wu:4", byteArray0);
+      assertEquals(8192, mimeTypes0.getMinLength());
+      assertEquals("application/octet-stream", string0);
+  }
+
+  @Test(timeout = 4000)
+  public void test23()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      Metadata metadata0 = new Metadata();
+      MediaType mediaType0 = mimeTypes0.detect((InputStream) null, metadata0);
+      assertEquals("octet-stream", mediaType0.getSubtype());
+  }
+
+  @Test(timeout = 4000)
+  public void test24()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      MediaType mediaType0 = MediaType.parse("application/xml");
+      MimeType mimeType0 = new MimeType(mediaType0);
+      mimeType0.addRootXML("text/plain", ";yY| $G~WeeSrC[bv~m");
+      mimeTypes0.add(mimeType0);
+      assertEquals("", mimeType0.getDescription());
+  }
+
+  @Test(timeout = 4000)
+  public void test25()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      MimeType mimeType0 = mimeTypes0.getMimeType("");
+      Magic magic0 = new Magic(mimeType0);
+      mimeType0.addMagic(magic0);
+      // Undeclared exception!
+      try { 
+        mimeTypes0.add(mimeType0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.Magic", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test26()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      byte[] byteArray0 = new byte[7];
+      String string0 = mimeTypes0.getType("text/html", "", byteArray0);
+      assertEquals(8192, mimeTypes0.getMinLength());
+      assertEquals("text/html", string0);
+  }
+
+  @Test(timeout = 4000)
+  public void test27()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      byte[] byteArray0 = new byte[8];
+      mimeTypes0.getType((String) null, "Qkt\"{!Favt,Zon}W", byteArray0);
+      assertEquals(8192, mimeTypes0.getMinLength());
+  }
+
+  @Test(timeout = 4000)
+  public void test28()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      byte[] byteArray0 = new byte[9];
+      String string0 = mimeTypes0.getType("o#G62M<W#G$U?Tt9t*", (String) null, byteArray0);
+      assertEquals("application/octet-stream", string0);
+      assertEquals(8192, mimeTypes0.getMinLength());
+  }
+
+  @Test(timeout = 4000)
+  public void test29()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((InputStream) null);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // InputStream is missing
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test30()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      byte[] byteArray0 = new byte[5];
+      byteArray0[0] = (byte)10;
+      MimeType mimeType0 = mimeTypes0.getMimeType("/pa$7vW", byteArray0);
+      assertFalse(mimeType0.hasMagic());
+  }
+
+  @Test(timeout = 4000)
+  public void test31()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      byte[] byteArray0 = new byte[1];
+      byteArray0[0] = (byte)91;
+      String string0 = mimeTypes0.getType("application/xml", "application/xml", byteArray0);
+      assertEquals("text/plain", string0);
+      assertEquals(8192, mimeTypes0.getMinLength());
+  }
+
+  @Test(timeout = 4000)
+  public void test32()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType("%.!XcU'A'9", (byte[]) null);
+        fail("Expecting exception: IllegalArgumentException");
+      
+      } catch(IllegalArgumentException e) {
+         //
+         // Data is missing
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test33()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      MediaTypeRegistry mediaTypeRegistry0 = mimeTypes0.getMediaTypeRegistry();
+      assertNotNull(mediaTypeRegistry0);
+  }
+
+  @Test(timeout = 4000)
+  public void test34()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      MimeType mimeType0 = mimeTypes0.getMimeType("application/xml");
+      mimeTypes0.addPattern(mimeType0, " ");
+      MimeType mimeType1 = mimeTypes0.getMimeType(" ");
+      assertFalse(mimeType1.hasMagic());
+  }
+
+  @Test(timeout = 4000)
+  public void test35()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes();
+      URI uRI0 = MockURI.aFileURI;
+      URL uRL0 = MockURI.toURL(uRI0);
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getType(uRL0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("java.net.URL", e);
+      }
+  }
+}
