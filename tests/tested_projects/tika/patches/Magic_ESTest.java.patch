diff --git a/tika-core/src/test/java/org/apache/tika/mime/Magic_ESTest.java b/tika-core/src/test/java/org/apache/tika/mime/Magic_ESTest.java
new file mode 100644
index 000000000..f6671f070
--- /dev/null
+++ b/tika-core/src/test/java/org/apache/tika/mime/Magic_ESTest.java
@@ -0,0 +1,438 @@
+/*
+ * This file was automatically generated by EvoSuite
+ * Wed Aug 14 13:41:33 GMT 2019
+ */
+
+package org.apache.tika.mime;
+
+import org.junit.Test;
+import static org.junit.Assert.*;
+import static org.evosuite.runtime.EvoAssertions.*;
+import org.apache.tika.detect.MagicDetector;
+import org.apache.tika.mime.AndClause;
+import org.apache.tika.mime.Clause;
+import org.apache.tika.mime.Magic;
+import org.apache.tika.mime.MagicMatch;
+import org.apache.tika.mime.MediaType;
+import org.apache.tika.mime.MimeType;
+import org.evosuite.runtime.EvoRunner;
+import org.evosuite.runtime.EvoRunnerParameters;
+import org.junit.runner.RunWith;
+
+@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
+public class Magic_ESTest extends Magic_ESTest_scaffolding {
+
+  @Test(timeout = 4000)
+  public void test00()  throws Throwable  {
+      MediaType mediaType0 = MediaType.TEXT_PLAIN;
+      assertNotNull(mediaType0);
+      assertEquals("text", mediaType0.getType());
+      assertEquals("plain", mediaType0.getSubtype());
+      
+      MimeType mimeType0 = new MimeType(mediaType0);
+      assertNotNull(mimeType0);
+      assertEquals("text", mediaType0.getType());
+      assertEquals("plain", mediaType0.getSubtype());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      Magic magic0 = new Magic(mimeType0);
+      assertNotNull(magic0);
+      assertEquals("text", mediaType0.getType());
+      assertEquals("plain", mediaType0.getSubtype());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      Clause[] clauseArray0 = new Clause[3];
+      clauseArray0[0] = (Clause) magic0;
+      AndClause andClause0 = new AndClause(clauseArray0);
+      assertEquals(3, clauseArray0.length);
+      assertNotNull(andClause0);
+      
+      magic0.setClause(andClause0);
+      assertEquals(3, clauseArray0.length);
+      assertEquals("text", mediaType0.getType());
+      assertEquals("plain", mediaType0.getSubtype());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      // Undeclared exception!
+      try { 
+        magic0.toString();
+        fail("Expecting exception: StackOverflowError");
+      
+      } catch(StackOverflowError e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test01()  throws Throwable  {
+      MediaType mediaType0 = MediaType.application("89");
+      assertNotNull(mediaType0);
+      assertEquals("application", mediaType0.getType());
+      assertEquals("89", mediaType0.getSubtype());
+      
+      MimeType mimeType0 = new MimeType(mediaType0);
+      assertNotNull(mimeType0);
+      assertEquals("application", mediaType0.getType());
+      assertEquals("89", mediaType0.getSubtype());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      Magic magic0 = new Magic(mimeType0);
+      assertNotNull(magic0);
+      assertEquals("application", mediaType0.getType());
+      assertEquals("89", mediaType0.getSubtype());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      MagicMatch magicMatch0 = new MagicMatch((MagicDetector) null, (-1025));
+      assertNotNull(magicMatch0);
+      assertEquals((-1025), magicMatch0.size());
+      
+      magic0.setClause(magicMatch0);
+      assertEquals("application", mediaType0.getType());
+      assertEquals("89", mediaType0.getSubtype());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals((-1025), magicMatch0.size());
+      
+      // Undeclared exception!
+      try { 
+        magic0.toString();
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MagicMatch", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test02()  throws Throwable  {
+      MediaType mediaType0 = MediaType.TEXT_PLAIN;
+      assertNotNull(mediaType0);
+      assertEquals("plain", mediaType0.getSubtype());
+      assertEquals("text", mediaType0.getType());
+      
+      MimeType mimeType0 = new MimeType(mediaType0);
+      assertNotNull(mimeType0);
+      assertEquals("plain", mediaType0.getSubtype());
+      assertEquals("text", mediaType0.getType());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      Magic magic0 = new Magic(mimeType0);
+      assertNotNull(magic0);
+      assertEquals("plain", mediaType0.getSubtype());
+      assertEquals("text", mediaType0.getType());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      magic0.setClause(magic0);
+      assertEquals("plain", mediaType0.getSubtype());
+      assertEquals("text", mediaType0.getType());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      // Undeclared exception!
+      try { 
+        magic0.size();
+        fail("Expecting exception: StackOverflowError");
+      
+      } catch(StackOverflowError e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test03()  throws Throwable  {
+      Magic magic0 = new Magic((MimeType) null);
+      assertNotNull(magic0);
+      
+      magic0.setClause(magic0);
+      // Undeclared exception!
+      try { 
+        magic0.compareTo(magic0);
+        fail("Expecting exception: StackOverflowError");
+      
+      } catch(StackOverflowError e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test04()  throws Throwable  {
+      MediaType mediaType0 = new MediaType("89", "89");
+      assertNotNull(mediaType0);
+      assertEquals("89", mediaType0.getType());
+      assertEquals("89", mediaType0.getSubtype());
+      
+      MimeType mimeType0 = new MimeType(mediaType0);
+      assertNotNull(mimeType0);
+      assertEquals("89", mediaType0.getType());
+      assertEquals("89", mediaType0.getSubtype());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      Magic magic0 = new Magic(mimeType0);
+      assertNotNull(magic0);
+      assertEquals("89", mediaType0.getType());
+      assertEquals("89", mediaType0.getSubtype());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      byte[] byteArray0 = new byte[5];
+      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(5, byteArray0.length);
+      assertNotNull(magicDetector0);
+      assertEquals("89", mediaType0.getType());
+      assertEquals("89", mediaType0.getSubtype());
+      
+      MagicMatch magicMatch0 = new MagicMatch(magicDetector0, (byte)30);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(5, byteArray0.length);
+      assertNotNull(magicMatch0);
+      assertEquals("89", mediaType0.getType());
+      assertEquals("89", mediaType0.getSubtype());
+      assertEquals(30, magicMatch0.size());
+      
+      magic0.setClause(magicMatch0);
+      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
+      assertEquals(5, byteArray0.length);
+      assertEquals("89", mediaType0.getType());
+      assertEquals("89", mediaType0.getSubtype());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertEquals(30, magicMatch0.size());
+      
+      int int0 = magic0.compareTo(magic0);
+      assertEquals(0, int0);
+      assertEquals("89", mediaType0.getType());
+      assertEquals("89", mediaType0.getSubtype());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+  }
+
+  @Test(timeout = 4000)
+  public void test05()  throws Throwable  {
+      MediaType mediaType0 = new MediaType("89", "89");
+      assertNotNull(mediaType0);
+      assertEquals("89", mediaType0.getType());
+      assertEquals("89", mediaType0.getSubtype());
+      
+      MimeType mimeType0 = new MimeType(mediaType0);
+      assertNotNull(mimeType0);
+      assertEquals("89", mediaType0.getType());
+      assertEquals("89", mediaType0.getSubtype());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      Magic magic0 = new Magic(mimeType0);
+      assertNotNull(magic0);
+      assertEquals("89", mediaType0.getType());
+      assertEquals("89", mediaType0.getSubtype());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      // Undeclared exception!
+      try { 
+        magic0.compareTo(magic0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.Magic", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test06()  throws Throwable  {
+      MediaType mediaType0 = new MediaType("", "");
+      assertNotNull(mediaType0);
+      assertEquals("", mediaType0.getType());
+      assertEquals("", mediaType0.getSubtype());
+      
+      MimeType mimeType0 = new MimeType(mediaType0);
+      assertNotNull(mimeType0);
+      assertEquals("", mediaType0.getType());
+      assertEquals("", mediaType0.getSubtype());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      Magic magic0 = new Magic(mimeType0);
+      assertNotNull(magic0);
+      assertEquals("", mediaType0.getType());
+      assertEquals("", mediaType0.getSubtype());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      magic0.setPriority(0);
+      assertEquals("", mediaType0.getType());
+      assertEquals("", mediaType0.getSubtype());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      Magic magic1 = new Magic(mimeType0);
+      assertNotNull(magic1);
+      assertEquals("", mediaType0.getType());
+      assertEquals("", mediaType0.getSubtype());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(magic1.equals((Object)magic0));
+      
+      int int0 = magic1.compareTo(magic0);
+      assertNotSame(magic0, magic1);
+      assertNotSame(magic1, magic0);
+      assertEquals((-50), int0);
+      assertEquals("", mediaType0.getType());
+      assertEquals("", mediaType0.getSubtype());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(magic0.equals((Object)magic1));
+      assertFalse(magic1.equals((Object)magic0));
+  }
+
+  @Test(timeout = 4000)
+  public void test07()  throws Throwable  {
+      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
+      assertNotNull(mediaType0);
+      assertEquals("zip", mediaType0.getSubtype());
+      assertEquals("application", mediaType0.getType());
+      
+      MimeType mimeType0 = new MimeType(mediaType0);
+      assertNotNull(mimeType0);
+      assertEquals("zip", mediaType0.getSubtype());
+      assertEquals("application", mediaType0.getType());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      Magic magic0 = new Magic(mimeType0);
+      assertNotNull(magic0);
+      assertEquals("zip", mediaType0.getSubtype());
+      assertEquals("application", mediaType0.getType());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      
+      MimeType mimeType1 = magic0.getType();
+      assertNotNull(mimeType1);
+      assertSame(mimeType0, mimeType1);
+      assertSame(mimeType1, mimeType0);
+      assertEquals("zip", mediaType0.getSubtype());
+      assertEquals("application", mediaType0.getType());
+      assertFalse(mimeType0.hasMagic());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType1.hasMagic());
+      assertEquals("", mimeType1.getDescription());
+  }
+
+  @Test(timeout = 4000)
+  public void test08()  throws Throwable  {
+      MediaType mediaType0 = MediaType.APPLICATION_XML;
+      assertNotNull(mediaType0);
+      assertEquals("application", mediaType0.getType());
+      assertEquals("xml", mediaType0.getSubtype());
+      
+      MimeType mimeType0 = new MimeType(mediaType0);
+      assertNotNull(mimeType0);
+      assertEquals("application", mediaType0.getType());
+      assertEquals("xml", mediaType0.getSubtype());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      
+      Magic magic0 = new Magic(mimeType0);
+      assertNotNull(magic0);
+      assertEquals("application", mediaType0.getType());
+      assertEquals("xml", mediaType0.getSubtype());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      
+      byte[] byteArray0 = new byte[2];
+      // Undeclared exception!
+      try { 
+        magic0.eval(byteArray0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.Magic", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test09()  throws Throwable  {
+      MediaType mediaType0 = MediaType.TEXT_PLAIN;
+      assertNotNull(mediaType0);
+      assertEquals("text", mediaType0.getType());
+      assertEquals("plain", mediaType0.getSubtype());
+      
+      MimeType mimeType0 = new MimeType(mediaType0);
+      assertNotNull(mimeType0);
+      assertEquals("text", mediaType0.getType());
+      assertEquals("plain", mediaType0.getSubtype());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      
+      Magic magic0 = new Magic(mimeType0);
+      assertNotNull(magic0);
+      assertEquals("text", mediaType0.getType());
+      assertEquals("plain", mediaType0.getSubtype());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      
+      // Undeclared exception!
+      try { 
+        magic0.size();
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.Magic", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test10()  throws Throwable  {
+      MediaType mediaType0 = MediaType.TEXT_PLAIN;
+      assertNotNull(mediaType0);
+      assertEquals("text", mediaType0.getType());
+      assertEquals("plain", mediaType0.getSubtype());
+      
+      MimeType mimeType0 = new MimeType(mediaType0);
+      assertNotNull(mimeType0);
+      assertEquals("text", mediaType0.getType());
+      assertEquals("plain", mediaType0.getSubtype());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      
+      Magic magic0 = new Magic(mimeType0);
+      assertNotNull(magic0);
+      assertEquals("text", mediaType0.getType());
+      assertEquals("plain", mediaType0.getSubtype());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+      
+      int int0 = magic0.getPriority();
+      assertEquals(50, int0);
+      assertEquals("text", mediaType0.getType());
+      assertEquals("plain", mediaType0.getSubtype());
+      assertEquals("", mimeType0.getDescription());
+      assertFalse(mimeType0.hasMagic());
+  }
+}
